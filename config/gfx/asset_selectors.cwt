# these are files that define links for different gfx files (models and icons).
# they include rooms, hair, dress and various other elements related to portraits.
# please note: room asset selector specifically is called in diplomatic events like this:
# picture_event_data = { room = cgm_menu_room } - the room = key part is related to an asset selector. This needs to be worked out in diplomatic
# events as well, to connect to the appropriate asset selector! You can see the menu events for my CGM mods for an example. -- exnihil
# also - please check the vanilla asset selectors. Basically there are several different kinds but they all seem to function identically,
# the difference between them appears to be determined by the key!

types = {
	type[asset_selector] = {
		path = "game/gfx/portraits/asset_selectors"
		path_extension = .txt
		severity = warning
		# clothes selectors and hair selectors are identical in structure, only difference is the key
		## type_key_filter <> room_selector
		subtype[asset] = {

		}
		## type_key_filter = room_selector
		subtype[room] = {

		}
		subtype[entity] = { # i'm not sure how these work and why.
			default = <model_entity>
		}
	}
}

# default has no trigger attached  it.
# assets written under default replace the default entry given a trigger, or if no default is defined - when fulfilling the trigger.
# see other.txt for the default no texture.

asset_selector = {
	subtype[asset] = {
		# clothes and hair selectors link directly to a dds files using filepath, room selectors point to textures that end with "_room.dds" but remove the file ending
		# entity selectors link to a model entity using its key. This is a way to distinguish between them I guess.

		default = filepath

		## cardinality = 0..1
		## replace_scopes = { this = no_scope root = no_scope }
		no_texture = {
			default = filepath
			## cardinality = 0..inf
			filepath = single_alias_right[trigger_clause]
		}

		## cardinality = 0..1
		## replace_scopes = { this = no_scope root = no_scope }
		game_setup = {
			## cardinality = 0..1
			default = filepath
			## cardinality = 0..inf
			random = {
				## cardinality = 0..1
				trigger = single_alias_right[trigger_clause]
				list = {
					## cardinality = 0..inf
					filepath
				}
			}
			## cardinality = 0..inf
			filepath = single_alias_right[trigger_clause]
		}

		## cardinality = 0..1
		## replace_scopes = { this = species root = species }
		species = {
			## cardinality = 0..1
			default = filepath
			## cardinality = 0..inf
			random = {
				## cardinality = 0..1
				trigger = single_alias_right[trigger_clause]
				list = {
					## cardinality = 0..inf
					filepath
				}
			}

			## cardinality = 0..inf
			filepath = single_alias_right[trigger_clause]
		}

		## cardinality = 0..1
		## replace_scopes = { this = pop root = pop }
		pop = {
			## cardinality = 0..1
			default = filepath
			## cardinality = 0..inf
			random = {
				## cardinality = 0..1
				trigger = single_alias_right[trigger_clause]
				list = {
					## cardinality = 0..inf
					filepath
				}
			}
			## cardinality = 0..inf
			filepath = single_alias_right[trigger_clause]
		}

		## cardinality = 0..1
		## replace_scopes = { this = leader root = leader }
		leader = {
			## cardinality = 0..1
			default = filepath #these do not have default in vanilla, but i assume default is supported.
			## cardinality = 0..inf
			random = {
				## cardinality = 0..1
				trigger = single_alias_right[trigger_clause]
				list = {
					## cardinality = 0..inf
					filepath
				}
			}
			## cardinality = 0..inf
			filepath = single_alias_right[trigger_clause]
		}

		## cardinality = 0..1
		## replace_scopes = { this = leader root = leader }
		ruler = {
			## cardinality = 0..1
			default = filepath
			## cardinality = 0..inf
			random = {
				## cardinality = 0..1
				trigger = single_alias_right[trigger_clause]
				list = {
					## cardinality = 0..inf
					filepath
				}
			}
			## cardinality = 0..inf
			filepath = single_alias_right[trigger_clause]
		}
	}
	subtype[room] = {
		# room selectors use a special way to link to dds files stored under gfx/portraits/city_sets
		# by pointingto a file that ends with _room.dds, always.
		# this needs to be worked out by dayshine!

		default = scalar # the room file link as explained in the above comment!

		## cardinality = 0..1
		## replace_scopes = { this = country root = country }
		game_setup = {
			## cardinality = 0..inf
			icon[gfx/portraits/city_sets] = single_alias_right[trigger_clause]  #这样可以直接找到对应图，这些图是不需要注册的，至少在蠢驴原版没有看见
		}
		## cardinality = 0..1
		## replace_scopes = { this = leader root = leader }
		ruler = {
			## cardinality = 0..1
			default = scalar # the room file link as explained in the above comment!
			## cardinality = 0..inf
			random = {
				## cardinality = 0..1
				trigger = single_alias_right[trigger_clause]
				list = {
					## cardinality = 0..inf
					filepath
				}
			}
			## cardinality = 0..inf
			icon[gfx/portraits/city_sets] = single_alias_right[trigger_clause] # the scalar here is the same kind of file link as in the above! 补充：同上
  		}
	}
	subtype[entity] = {
		#see entity_selectors.txt

		default = <model_entity>

		## cardinality = 0..1
		## replace_scopes = { this = leader root = leader }
		ruler = {
			## cardinality = 0..1
			default = <model_entity>
			## cardinality = 0..inf
			random = {
				## cardinality = 0..1
				trigger = single_alias_right[trigger_clause]
				list = {
					## cardinality = 0..inf
					filepath
				}
			}
			## cardinality = 0..inf
			<model_entity> = single_alias_right[trigger_clause]
		}
	}
}
