types = {
	type[galaxy_shape] = {
		path = "game/map/galaxy"
		file_extension = .txt
	}
	type[map_setup_scenario] = {
		path = "game/map/setup_scenarios"
		name_field = name
		file_extension = .txt
	}
}

galaxy_shape = {
	### Core radius is x% of the galaxy radius
	## cardinality = 0..1
	core_radius_perc = float
	### Number of stars in core
	## cardinality = 0..1
	num_stars_core_perc = float
	### Min distance between stars
	## cardinality = 0..1
	stars_min_dist = float

	## cardinality = 0..1
	countries = {
		### int*int Ideal square distance between countries
		ideal_sq_dist_between = int
		### int*int Min square distance between countries
		min_sq_dist_between = int
	}

	## cardinality = 0..1
	fallen_empires = {
		### int*int Ideal square distance between countries
		ideal_sq_dist_between = int
		### int*int Min square distance between countries
		min_sq_dist_between = int
	}

	## cardinality = 0..1
	num_arms = int

	## cardinality = 0..1
	ring = {
		### Percentage of radius to use as the width of the ring
		width = float
		### Percentage of radius to use as the offset from center for the ring
		offset = float
	}

	## cardinality = 0..1
	arms = {
		### Tightness of winding
		tightness_winding = float
		### Arm width in degrees
		width = float
		### Maximum outliers distance from arms
		fuzz = float
		### Separation (in degrees) between each arm
		seperation = float
	}
}

map_setup_scenario = {
	name = localisation
	### priority decides in which order the scenarios are listed
	priority = int
	num_stars = int
	### should be less than 500, preferably less than ~460
	radius = float

	### limits player customization
	num_empires = {
		min = int
		max = int
	}
	num_empire_default = int
	fallen_empire_default = int
	fallen_empire_max = int
	marauder_empire_default = int
	marauder_empire_max = int
	advanced_empire_default = int
	colonizable_planet_odds = float
	primitive_odds = float
	crisis_strength = float
	## cardinality = 0..1
	extra_crisis_strength = {
		## cardinality = 0..inf
		float
	}
	## cardinality = 0..1
	default = bool

	cluster_count = {
		method = enum[cluster_method]
		value = int
		max = int
	}
	cluster_radius = float
	cluster_distance_from_core = float

	max_hyperlane_distance = float

	home_system_partitions = {
		max_systems = int
		min_systems = int

		min_bridges = int
		max_bridges = int

		method = enum[home_system_method]
	}

	open_space_partitions = {
		max_systems = int
		min_systems= int

		min_bridges = int
		max_bridges = int

		method = enum[open_space_method]
	}

	num_nebulas	= int
	nebula_size = float
	nebula_min_dist = float

	num_wormhole_pairs = {
		min = float
		max = float
	}
	num_wormhole_pairs_default = float
	num_gateways = {
		min = float
		max = float
	}
	num_gateways_default = float
	num_hyperlanes = {
		min = float
		max = float
	}
	num_hyperlanes_default = float

	## cardinality = 1..inf
	supports_shape = <galaxy_shape>

	# from static_galaxy_example.txt

	## cardinality = 0..1
	random_hyperlanes = bool
	## cardinality = 0..1
	core_radius = int
	### Subsequent systems will have the coordinates entered for them altered by these numbers
	## cardinality = 0..1
	coordinate_transform = {
		## cardinality = 0..1
		x = single_alias_right[coordinate_transform]
		## cardinality = 0..1
		y = single_alias_right[coordinate_transform]
		## cardinality = 0..1
		z = single_alias_right[coordinate_transform]
	}
	## cardinality = 0..inf
	system = {
		## cardinality = 0..1
		id = enum[map_setup_scenario_system_id]
		name = localisation
		## severity = information
		name = scalar
		position = {
			x = float
			x = { min = float max = float }
			y = float
			y = { min = float max = float }
		}
		## cardinality = 0..1
		initializer = <solar_system_initializer>
		## cardinality = 0..1
		spawn_weight = {
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
		## cardinality = 0..1
		spawn_design = <prescripted_country>
		## cardinality = 0..1
		## replace_scopes = { this = system root = system }
		effect = {
			alias_name[effect] = alias_match_left[effect]
		}
	}
	## cardinality = 0..inf
	add_hyperlane = {
		from = enum[map_setup_scenario_system_id]
		to = enum[map_setup_scenario_system_id]
	}
	## cardinality = 0..inf
	prevent_hyperlane = {
		from = enum[map_setup_scenario_system_id]
		to = enum[map_setup_scenario_system_id]
	}
	## cardinality = 0..inf
	nebula = {
		name = scalar
		name = localisation
		position = {
			x = int
			y = int
			z = int
		}
		radius = int
	}
}

single_alias[coordinate_transform] = {
	## cardinality = 0..inf
	enum[coordinate_transform_operator] = float
}

enums = {
	enum[cluster_method] = {
		one_every_x_empire
		constant
	}
	enum[home_system_method] = {
		breadth_first
	}
	enum[open_space_method] = {
		depth_first
	}
	enum[coordinate_transform_operator] = {
		add
		sub
		mul
		div
	}
}

enums = {
	## search_scope_type = definition
	complex_enum[map_setup_scenario_system_id] = {
		path = "game/map/setup_scenarios"
		file_extension = .txt
		name = {
			system = {
				id = enum_name
			}
		}
	}
}
