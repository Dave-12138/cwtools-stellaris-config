on_actions = {
	### Triggers when the game starts
	## replace_scopes = { this = no_scope root = no_scope }
	on_game_start = scopeless

	## replace_scopes = { this = country root = country }
	on_game_start_country = country

	### No scope, like on_game_start
	### Does not run when loading MP saves due to OOS concerns
	## replace_scopes = { this = no_scope root = no_scope }
	on_single_player_save_game_load = scopeless

	### No scope, like on_game_start
	## replace_scopes = { this = no_scope root = no_scope }
	on_monthly_pulse = scopeless

	### No scope, like on_game_start
	## replace_scopes = { this = no_scope root = no_scope }
	on_yearly_pulse = scopeless

	### No scope, like on_game_start
	## replace_scopes = { this = no_scope root = no_scope }
	on_bi_yearly_pulse = scopeless

	### No scope, like on_game_start
	## replace_scopes = { this = no_scope root = no_scope }
	on_five_year_pulse = scopeless

	### No scope, like on_game_start
	## replace_scopes = { this = no_scope root = no_scope }
	on_decade_pulse = scopeless

	### No scope, like on_game_start
	## replace_scopes = { this = no_scope root = no_scope }
	on_mid_game_pulse = scopeless

	### No scope, like on_game_start
	## replace_scopes = { this = no_scope root = no_scope }
	on_late_game_pulse = scopeless

	## replace_scopes = { this = country root = country }
	on_monthly_pulse_country = country

	## replace_scopes = { this = country root = country }
	on_yearly_pulse_country = country

	## replace_scopes = { this = country root = country }
	on_bi_yearly_pulse_country = country

	## replace_scopes = { this = country root = country }
	on_five_year_pulse_country = country

	### fired via action.220 from on_five_year_pulse_country
	## replace_scopes = { this = country root = country }
	on_five_year_random_pulse_country = country

	### fired via action.420
	## replace_scopes = { this = country root = country }
	on_five_year_random_pulse_overlord = country

	### Why do this, you might ask, and not just use a random_list? Because on_actions check the triggers of the event before they try to fire them and exclude them from the list if they are false, so a list with no 0 weight will always fire an event so long as any of them are able to be fired
	### Used in operation_diplomatic_incident. Beware when changing.
	### this = country, fired via action.2211 from on_five_year_random_pulse_country
	## replace_scopes = { this = country root = country }
	on_five_year_random_pulse_country_negative_list = country

	## replace_scopes = { this = country root = country }
	on_decade_pulse_country = country

	## replace_scopes = { this = country root = country }
	on_mid_game_pulse_country = country

	## replace_scopes = { this = country root = country }
	on_late_game_pulse_country = country

	## replace_scopes = { this = country root = country }
	on_late_game_pulse_country = country

	### setup advanced colony. So far it has a pop on the capital and a colony shelter building matching the is_colony trigger
	## replace_scopes = { this = planet root = planet from = country }
	on_initialize_advanced_colony = planet

	## replace_scopes = { this = country root = country }
	on_become_advanced_empire = country

	### Triggers when pressing begin in the intro window
	### This = country to press begin
	## replace_scopes = { this = country root = country }
	on_press_begin = country

	### Triggers when trying to open the diplomacy view for countries with custom diplomacy.
	### Country scope
	### This = target country (player)
	### From = source country
	## replace_scopes = { this = country root = country from = country }
	on_custom_diplomacy = country

	### Triggered when two empires discover each other
	### This = Empire 1
	### From = Empire 2
	### Fromfromfrom = System where contact occurred
	## replace_scopes = { this = country root = country from = country fromfrom = fleet fromfromfrom = system }
	on_first_contact = country

	### Triggered when a first contact process is finished
	### This = first contact scope
	### From = other country
	## replace_scopes = { this = first_contact root = first_contact from = country }
	on_first_contact_finished = first_contact

	### Triggered when an Empire has fleets within another Empire's borders.
	### This = receiver
	### From = sender
	### FromFrom = fleet
	### FromFromFrom = system
	## replace_scopes = { this = country root = country from = country fromfrom = fleet fromfromfrom = system }
	on_enforce_borders = country

	### Triggers when ground combat starts
	### This = planet
	### From = country attacking
	## replace_scopes = { this = planet root = planet from = country }
	on_ground_combat_started = planet

	### Triggers country_event for the attacker upon victory \
	### (Before controller is switched)
	### This = country, leader attacker
	### From = country, planet owner
	### FromFrom = planet
	### IDENTITIES: attacker is the side that "IsHostile" to \
	### the planet controller; e.g. spawned monster armies \
	### are attackers, but if they win and the player attempts \
	### to retake the planet, the player is the attacker
	## replace_scopes = { this = country root = country from = country fromfrom = planet }
	on_planet_attackers_win = country

	### Triggers country_event for the attacker upon defeat
	### This = country, attack leader
	### From = country, planet owner
	### FromFrom = planet
	## replace_scopes = { this = country root = country from = country fromfrom = planet }
	on_planet_attackers_lose = country

	### Triggers country_event for the defender upon victory
	### Root = country, planet owner
	### From = country, attack leader
	### FromFrom = planet
	## replace_scopes = { this = country root = country from = country fromfrom = planet }
	on_planet_defenders_win = country

	### Triggers country_event for the defender upon defeat
	### This = country, planet owner
	### From = country, attack leader
	### FromFrom = planet
	## replace_scopes = { this = country root = country from = country fromfrom = planet }
	on_planet_defenders_lose = country

	### Fires when you first get intel (_low and up) on a new system
	### Scope = Country
	### From = System
	## replace_scopes = { this = country root = country from = system }
	on_system_first_visited = country

	### Triggers event when each country first sends a ship into the system (once per country)
	### Scope = Ship
	### From = System
	### FromFrom = Country
	## replace_scopes = { this = ship root = ship from = system fromfrom = country }
	on_entering_system_first_time = ship

	### Triggers event when ship enters a system. It's usually better to use on_entering_system_first_time or on_entering_system_fleet
	### Scope = Ship
	### From = System
	### FromFrom = Country
	## replace_scopes = { this = ship root = ship from = system fromfrom = country }
	on_entering_system = ship

	### A fleet has entered a system | See also: on_fleet_auto_move_arrival
	### Scope = Fleet
	### From = System
	## replace_scopes = { this = fleet root = fleet from = system }
	on_entering_system_fleet = fleet

	### A fleet has entered a system | See also: on_fleet_auto_move_arrival
	### Scope = Fleet
	### From = System
	## replace_scopes = { this = fleet root = fleet from = system }
	on_entering_system_fleet = fleet

	### A fleet executes a move order to exit borders
	### Scope = Fleet
	### From = Origin System
	### FromFrom = Destination System
	## replace_scopes = { this = fleet root = fleet from = system fromfrom = system }
	on_crossing_border = fleet

	### A ship has surveyed a planet.
	### Scope = Ship
	### From = Planet
	## replace_scopes = { this = ship root = ship from = planet }
	on_survey = ship

	### A country has gained a surveyed status on a planet. Happens after "on_survey" if a science ship surveyed a planet. (Can also happen without a ship through changes in intel levels)
	### Root = Planet
	### From = Country
	### FromFrom = Fleet of the science ship that surveyed it, if any
	## replace_scopes = { this = planet root = planet from = country formfrom = fleet }
	on_planet_surveyed = planet

	### A country has gained a surveyed status on a planet. Happens after "on_survey" if a science ship surveyed a planet.
	### Root = Country
	### From = system
	### FromFrom = Fleet of the science ship that surveyed it, if any
	## replace_scopes = { this = country root = country from = system fromfrom = fleet }
	on_system_survey = country

	### A ship is done surveying the last unsurveyed planet in a system
	### Scope = ship
	### From = system
	## replace_scopes = { this = ship root = ship from = system }
	on_system_survey_ship = ship

	### A planet has begun the colonization process.
	### Scope = Planet
	## replace_scopes = { this = planet root = planet }
	on_colonization_started = planet

	### A planet has been colonized.
	### Scope = Planet
	## replace_scopes = { this = planet root = planet }
	on_colonized = planet

	### A colony has been destroyed. Called just before owner and controller is cleared
	### Scope = Planet
	## replace_scopes = { this = planet root = planet }
	on_colony_destroyed = planet

	### This = owner of fleet 1
	### From = owner of fleet 2
	### FromFrom = fleet 1
	### FromFromFrom = fleet 2
	## replace_scopes = { this = country root = country from = country fromfrom = fleet fromfromfrom = fleet }
	on_entering_battle = country

	### This = owner of ship 1 (destroyed)
	### From = owner of ship 2 (combatant)
	### FromFrom = ship 1
	### FromFromFrom = ship 2
	## replace_scopes = { this = country root = country from = country fromfrom = ship fromfromfrom = ship }
	on_ship_destroyed_victim = country

	### This = owner of ship 1 (combatant)
	### From = owner of ship 2 (destroyed)
	### FromFrom = ship 1
	### FromFromFrom = ship 2
	## replace_scopes = { this = country root = country from = country fromfrom = ship fromfromfrom = ship }
	on_ship_destroyed_perp = country

	### This = starbase being destroyed (not ship!)
	### From = fleet that destroyed the starbase
	## replace_scopes = { this = starbase root = starbase from = fleet }
	on_starbase_destroyed = starbase

	### This = starbase being disabled (not ship!)
	### From = fleet that disabled the starbase
	## replace_scopes = { this = starbase root = starbase from = fleet }
	on_starbase_disabled = starbase

	### This = owner of ship 1 (destroyed)
	### From = owner of ship 2 (combatant)
	### FromFrom = ship 1
	### FromFromFrom = ship 2
	## replace_scopes = { this = country root = country from = country fromfrom = ship fromfromfrom = ship }
	on_ship_disengaged_victim = country

	### This = owner of ship 1 (combatant)
	### From = owner of ship 2 (destroyed)
	### FromFrom = ship 1
	### FromFromFrom = ship 2
	## replace_scopes = { this = country root = country from = country fromfrom = ship fromfromfrom = ship }
	on_ship_disengaged_perp = country

	### This = owner of fleet 1 (destroyed)
	### From = owner of fleet 2 (combatant)
	### FromFrom = fleet 1
	### FromFromFrom = fleet 2
	## replace_scopes = { this = country root = country from = country fromfrom = fleet fromfromfrom = fleet }
	on_fleet_destroyed_victim = country

	### This = owner of fleet 1 (combatant)
	### From = owner of fleet 2 (destroyed)
	### FromFrom = fleet 1
	### FromFromFrom = fleet 2
	## replace_scopes = { this = country root = country from = country fromfrom = fleet fromfromfrom = fleet }
	on_fleet_destroyed_perp = country

	### This = owner of fleet 1 (winner)
	### From = owner of fleet 2 (loser)
	### FromFrom = fleet 1
	### FromFromFrom = fleet 2
	## replace_scopes = { this = country root = country from = country fromfrom = fleet fromfromfrom = fleet }
	on_space_battle_won = country

	### This = owner of fleet 1 (loser)
	### From = owner of fleet 2 (winner)
	### FromFrom = fleet 1
	### FromFromFrom = fleet 2
	## replace_scopes = { this = country root = country from = country fromfrom = fleet fromfromfrom = fleet }
	on_space_battle_lost = country

	### This = owner of fleet
	### From = disbanded fleet
	## replace_scopes = { this = country root = country from = fleet }
	on_fleet_disbanded = country

	### This = owner of fleet
	### From = fleet
	### FromFrom = planet (if any)
	## replace_scopes = { this = country root = country from = fleet fromfrom = planet }
	on_fleet_auto_move_arrival = country

	### This = fleet
	### From = country that borrowed the fleet
	### FromFrom = country that owns the fleet
	### Is fired immediately after fleet is leased out
	## replace_scopes = { this = fleet root = fleet from = country fromfrom = country }
	on_fleet_contract_started = fleet

	### This = fleet
	### From = country that borrowed the fleet
	### FromFrom = country that owns the fleet
	### FromFromFrom = country that initiated the ending (the same as owner in a case of expiration)
	### Is fired immediately after fleet contract is expired
	## replace_scopes = { this = fleet root = fleet from = country fromfrom = country fromfromfrom = country }
	on_fleet_contract_expired = fleet

	### This = fleet
	### From = country that borrowed the fleet
	### FromFrom = country that owns the fleet
	### FromFromFrom = country that initiated the ending (trade deal actor when the contract cancellation is a part of trade deal)
	### Is fired immediately after fleet contract is cancelled (when controller prematurely finishes the contract or when the contract cancellation is a part of trade deal)
	## replace_scopes = { this = fleet root = fleet from = country fromfrom = country fromfromfrom = country }
	on_fleet_contract_cancelled = fleet

	### This = fleet
	### From = country that borrowed the fleet
	### FromFrom = country that owns the fleet
	### FromFromFrom = country that initiated the ending (main attacker in a case of war)
	### Is fired immediately after fleet contract is broken (when country is attacked by someone of when a war is started)
	## replace_scopes = { this = fleet root = fleet from = country fromfrom = country fromfromfrom = country }
	on_fleet_contract_broken = fleet

	# The game will generate one on_building_X on_action for every station ship-size
	# Orbital stations will get the planet in FROM, space stations only get they building ship

	### This = construction ship
	### From = planet it is built on
	### Fires when construction is complete,
	### immediately before station is created
	## replace_scopes = { this = ship root = ship from = planet }
	on_building_<ship_size.station> = ship

	### This = ship (starbase)
	### From = owner country
	## replace_scopes = { this = ship root = ship from = planet }
	on_building_<ship_size.starbase> = ship

	### This = country
	### From = opponent war leader
	## replace_scopes = { this = country root = country from = country }
	on_entering_war = country

	### This = Country
	### From = Fleet
	## replace_scopes = { this = country root = country from = fleet }
	on_fleet_detected = country

	### This = Ship
	### From = Disabler Ship
	## replace_scopes = { this = ship root = ship from = ship }
	on_ship_disabled = ship

	### This = Ship
	## replace_scopes = { this = ship root = ship }
	on_ship_enabled = ship

	### Triggers when a Special Project to uplift a pre-sapient species is completed. \
	### Note that this will trigger once for each combination of planet & original \
	### species (but for uplifting this should be only once).
	### Scope = planet_event
	### This = planet scope
	### From = uplifted species (pre-modification)
	## replace_scopes = { this = planet root = planet from = species }
	on_uplift_completion = planet

	### Planets starts being terraformed
	### This = Planet
	### From = Terraforming country
	## replace_scopes = { this = planet root = planet from = country }
	on_terraforming_begun = planet

	### Planet has been terraformed
	### This = Planet
	### From = Terraforming country
	## replace_scopes = { this = planet root = planet from = country }
	on_terraforming_complete = planet

	### Planet has changed planet class in whatever way. Note that this is also called during galaxy creation in some places.
	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_planet_class_changed = planet

	### Planet has taken damage from orbital bombardment - Damage is applied daily
	### This = Planet
	### From = Bombarder
	## replace_scopes = { this = planet root = planet from = country }
	on_planet_bombarded = planet

	### Planet has reached 0 pops from orbital bombardment
	### This = Planet
	### From = Bombarder
	## replace_scopes = { this = planet root = planet from = country }
	on_planet_zero_pops = planet

	### Planet has reached 0 pops from collateral damage
	### This = Planet
	### From = Army owner
	## replace_scopes = { this = planet root = planet from = country }
	on_planet_zero_pops_ground_combat = planet

	### Pop is abducted by raiding stance
	### This = Pop scope
	### From = planet abducted from
	## replace_scopes = { this = pop root = pop from = planet }
	on_pop_abducted = pop

	### Pop is enslaved
	### This = Pop scope
	### owner_species = { (species)
	### owner = { owner_species = { (empire main species)
	### owner = { (empire)
	## replace_scopes = { this = pop root = pop }
	on_pop_enslaved = pop

	### Pop is released from slavery
	### This = Pop scope
	### owner_species = { (species)
	### owner = { owner_species = { (empire main species)
	### owner = { (empire)
	## replace_scopes = { this = pop root = pop }
	on_pop_emancipated = pop

	### Pop is resettled
	### From is previous planet
	### planet = { } is new planet
	## replace_scopes = { this = pop root = pop from = planet }
	on_pop_resettled = pop

	### Executed right before a country has established communications with another country
	### This = Country which established the communications
	### From = Country which communications were established with
	## replace_scopes = { this = country root = country from = country }
	on_pre_communications_established = country

	### Executed right after country has established communications with another country
	### This = Country which established the communications
	### From = Country which communications were established with
	## replace_scopes = { this = country root = country from = country }
	on_post_communications_established = country

	### Executed just after country has established communications with another country
	### This = Planet where the pop was bombed to death
	### From = Country which is raining down fire and brimstone
	## replace_scopes = { this = planet root = planet from = country }
	on_pop_bombed_to_death = planet

	### Executed as a leader has died
	### This = Country
	### From = Leader
	## replace_scopes = { this = country root = country from = leader }
	on_leader_death = country

	### Executed as a leader has been fired
	### This = Country
	### From = Leader
	## replace_scopes = { this = country root = country from = leader }
	on_leader_fired = country

	### A leader leveled up.
	### Scope = Country
	### From = Leader
	## replace_scopes = { this = country root = country from = leader }
	on_leader_level_up = country

	### Scope: Leader (after assignment)
	## replace_scopes = { this = leader root = leader }
	on_leader_assigned = leader

	### Scope: Leader (just before unassignment)
	### Fires if a leader is unassigned from their position for any reason (including being assigned elsewhere)
	## replace_scopes = { this = leader root = leader }
	on_leader_unassigned = leader

	### Executed as new ruler has been set
	### This = Country
	## replace_scopes = { this = country root = country }
	on_ruler_set = country

	### Executed when a ruler has been removed
	### From = Previous Ruler
	### This = Country
	## replace_scopes = { this = country root = country from = leader }
	on_ruler_removed = country

	### Executed when the ruler is ousted and goes back to their pre-ruler class
	### From = Previous Ruler, already has the new class
	### This = Country
	## replace_scopes = { this = country root = ocuntry from = leader }
	on_ruler_back_to_pre_ruler_class = country

	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_blocker_cleared = planet

	### A ship has started a new order
	### Root = Ship
	### From = Country
	## replace_scopes = { this = ship root = ship from = country }
	on_ship_order = ship

	### Executes after a policy has been changed
	### use last_changed_policy to identify which policy it was
	### This = Country
	## replace_scopes = { this = country root = country }
	on_policy_changed = country

	### A ship has been built
	### Root = Ship
	### From = Planet
	## replace_scopes = { this = ship root = ship from = planet }
	on_ship_built = ship

	### A ship design has been finished
	### Root = Country
	## replace_scopes = { this = country root = country }
	on_ship_designed = country

	### A ship has been upgraded
	### Root = Ship
	## replace_scopes = { this = ship root = ship }
	on_ship_upgraded = ship

	### A war is beginning, executed for every country in the war.
	### Root = Country
	### From = War
	## replace_scopes = { this = country root = country from = war }
	on_war_beginning = country

	### A war has ended
	### Root = Loser
	### From = Main Winner
	## replace_scopes = { this = country root = country from = country }
	on_war_ended = country

	# A country has been released through a peace deal in a war
	# Root = new country
	# From = country forcing the release
	# FromFrom = country they are released from
	# FromFromFrom = war
	## replace_scopes = { this = country root = country from = country fromfrom = country fromfromfrom = war }
	on_country_released_in_war = country

	### A country has increased the level of a tech, use last_increased_tech trigger to check tech and level.
	### This = Country
	## replace_scopes = { this = country root = country }
	on_tech_increased = country

	### Triggers when a Special Project to apply a species modification template has completed. \
	### Note that this will trigger once for each combination of planet & original species.
	### This = Country
	### From = Species ( Post Modification )
	## replace_scopes = { this = country root = country from = species }
	on_modification_complete = country

	### A planets controller becomes a country not the same as the owner.
	### Root = Planet
	### From = Planet Owner
	### FromFrom = Planet Controller (the one occupying)
	## replace_scopes = { this = planet root = planet from = country fromfrom = country }
	on_planet_occupied = planet

	### A fleet has successfully escaped from combat, executed right before the fleet enters FTL
	### This = escaping fleet
	### From = system escaped from
	### FromFrom = system escaping to
	## replace_scopes = { this = fleet root = fleet from = system fromfrom = system }
	on_emergency_ftl = fleet

	### An army construction has been completed.
	### This = Planet
	### From = Army
	## replace_scopes = { this = planet root = country from = army }
	on_army_recruited = planet

	### An army has been killed in ground combat
	### This = owner
	### From = army
	### FromFrom = opponent
	### FromFromFrom = planet
	## replace_scopes = { this = country root = country from = army fromfrom = army fromfrofrom = planet }
	on_army_killed_in_combat = country

	### An army has ceased to exist for any other reason
	### This = country
	### From = army
	## replace_scopes = { this = country root = country from = army }
	on_army_killed_no_combat = country

	### A building construction has been completed.
	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_building_complete = planet

	### A building construction has been queued.
	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_building_queued = planet

	### A building construction has been unqueued.
	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_building_unqueued = planet

	### A building construction has been completed, which is an upgrade of previous building.
	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_building_upgraded = planet

	### A building construction has demolished.
	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_building_demolished = planet

	### A district construction has been completed.
	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_district_complete = planet

	### A building construction has finished, replacing another building.
	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_building_replaced = planet

	### A building construction has been downgraded and replaced.
	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_building_downgraded = planet

	### A district construction has been queued.
	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_district_queued = planet

	### A district construction has been unqueued.
	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_district_unqueued = planet

	### A district construction has demolished.
	### This = Planet
	## replace_scopes = { this = planet root = planet }
	on_district_demolished = planet

	### Tutorial level for a country has changed
	### This = Country
	## replace_scopes = { this = country root = country from = country fromfrom = war }
	on_tutorial_level_changed = country

	### A war has been won
	### Root = Winner Warleader
	### From = Loser Warleader
	### FromFrom = War
	## replace_scopes = { this = country root = country from = country fromfrom = war }
	on_war_won = country

	### A war has been lost
	### Root = Loser Warleader
	### From = Winner Warleader
	### FromFrom = War
	## replace_scopes = { this = country root = country from = country fromfrom = war }
	on_war_lost = country

	### A status quo has been signed
	### Root = Actor
	### From = Recipient
	### FromFrom = Main Attacker
	### FromFromFrom = Main Defender
	### FromFromFromFrom = War
	## replace_scopes = { this = country root = country from = country fromfrom = country fromfromfrom = country fromfromfromfrom = war }
	on_status_quo = country

	### A status quo has been signed, by force
	### Root = Recipient
	### From = Actor
	### FromFrom = Main Attacker
	### FromFromFrom = Main Defender
	### FromFromFromFrom = War
	## replace_scopes = { this = country root = country from = country fromfrom = country fromfromfrom = country fromfromfromfrom = war }
	on_status_quo_forced = country

	### A pop has been added to the planet
	### Root = pop
	### From = planet
	## replace_scopes = { this = root root = pop from = planet }
	on_pop_added = pop

	### We changed a species right
	### This = pop
	## replace_scopes = { this = pop root = pop }
	on_pop_rights_change = pop

	### A pop has finished growing
	### This = Planet scope
	### From = Country
	### FromFrom = Pop
	## replace_scopes = { this = planet root = planet from = country fromfrom = country }
	on_pop_grown = planet

	### A pop has finished assembling
	### This = Planet scope
	### From = Country
	### FromFrom = Pop
	## replace_scopes = { this = planet root = planet from = country fromfrom = country }
	on_pop_assembled = planet

	### A pop has finished purging
	### This = Planet scope
	### From = Country
	### FromFrom = Pop
	## replace_scopes = { this = planet root = planet from = country fromfrom = country }
	on_pop_purged = planet

	### A pop has finished declining (while not being purged)
	### This = Planet scope
	### From = Country
	### FromFrom = Pop
	## replace_scopes = { this = planet root = planet from = country fromfrom = country }
	on_pop_declined = planet

	### A pop has been displaced
	### This = Planet scope
	### From = Country
	### FromFrom = Pop
	## replace_scopes = { this = planet root = planet from = country fromfrom = country }
	on_pop_displaced = planet

	### Initial rebels manage to take control of the planet, happens before the new owner is set, after the war is created.
	### This = Rebel Country
	### From = Planet
	### FromFrom = War
	## replace_scopes = { this = country root = country from = planet fromfrom = war }
	on_rebels_take_planet = country

	### Initial rebels manage to take control of the planet, happens after the new owner is set, after the war is created.
	### This = Rebel Country
	### From = Planet
	### FromFrom = War
	## replace_scopes = { this = country root = country from = planet fromfrom = war }
	on_rebels_take_planet_owner_switched = country

	### FromFrom = Former Owner
	### From = Country scope (new owner, so invalid)
	### This = Planet scope
	## replace_scopes = { this = planet root = planet from = country fromfrom = country }
	on_planet_ownerless = planet

	### Fired whenever a new owner is set for a planet,
	### be it after a war or through a trade
	### FromFrom = Former Owner (if any)
	### From = Country scope (new owner)
	### This = Planet scope
	## replace_scopes = { this = planet root = planet from = country fromfrom = country }
	on_planet_transfer = planet

	### Fired whenever a new owner is set for a planet, and the planet was aggressively conquered
	### Fired in ADDITION to on_planet_transfer
	### FromFrom = Former Owner
	### From = Country scope (new owner)
	### This = Planet scope
	## replace_scopes = { this = planet root = planet from = country fromfrom = country }
	on_planet_conquer = planet

	### You have changed the location of your capital. Also called when a country's capital is first set e.g. during galaxy creation (but then FROM is not set)
	### this/root = new capital
	### from = old capital
	## replace_scopes = { this = planet root = planet from = planet }
	on_capital_changed = planet

	### From = Planet/Starbase/Megastructure scope
	### This = Fleet scope
	## replace_scopes = { this = fleet root = fleet from = planet }
	on_fleet_enter_orbit = fleet

	### This = Federation leader
	### From = Joining member
	## replace_scopes = { this = country root = country from = country }
	on_join_federation = country

	### This = Federation leader
	### From = Leaving member
	## replace_scopes = { this = country root = country from = country }
	on_leave_federation = country

	### This = Country scope, federation leader
	### From = Country to initiate the vote
	## replace_scopes = { this = country root = country from = country }
	on_federation_law_vote_succeed = country

	### This = Country scope, federation leader
	### From = Country to initiate the vote
	## replace_scopes = { this = country root = country from = country }
	on_federation_law_vote_failed = country

	### This = Country scope, federation leader
	### From = Country to exclude from the federation elections
	## replace_scopes = { this = country root = country from = country }
	on_federation_leader_elections = country

	### This = Country scope, new federation leader
	### From = Previous leader (if still existing)
	## replace_scopes = { this = country root = country from = country }
	on_federation_new_leader = country

	### This = Country scope, federation leader
	### From = Country to exclude from the federation psionicbattle
	## replace_scopes = { this = country root = country from = country }
	on_federation_leader_challenge = country

	### A country is created via create_country or create_rebels
	### This = created country
	### From = root of context where create_country/create_rebels happens
	## replace_scopes = { this = country root = country from = any }
	on_country_created = country

	### This = destroyed country
	### From = optional, destroyer (country)
	## replace_scopes = { this = country root = country from = country }
	on_country_destroyed = country

	### A Megastructure has been built
	### Root = Country
	### From = Megastructure
	### FromFrom = System
	### FromFromFrom = Fleet
	## replace_scopes = { this = country root = country from = megastructure fromfrom = system }
	on_megastructure_built = country

	### A Megastructure has begun to be upgraded
	### Root = Country
	### From = Megastructure
	### FromFrom = System
	## replace_scopes = { this = country root = country from = megastructure fromfrom = system }
	on_megastructure_upgrade_begin = country
	root

	### A Megastructure has been upgraded
	### Root = Country
	### From = Megastructure
	### FromFrom = System
	## replace_scopes = { this = country root = country from = megastructure fromfrom = system }
	on_megastructure_upgraded = country

	# X years has passed since a planet was colonized (won't trigger on empire homeworld)

	### 1 years has passed since a planet was colonized (won't trigger on empire homeworld)
	## replace_scopes = { this = planet root = planet }
	on_colony_1_year_old = planet

	### 2 years has passed since a planet was colonized (won't trigger on empire homeworld)
	## replace_scopes = { this = planet root = planet }
	on_colony_2_years_old = planet

	### 3 years has passed since a planet was colonized (won't trigger on empire homeworld)
	## replace_scopes = { this = planet root = planet }
	on_colony_3_years_old = planet

	### 4 years has passed since a planet was colonized (won't trigger on empire homeworld)
	## replace_scopes = { this = planet root = planet }
	on_colony_4_years_old = planet

	### 5 years has passed since a planet was colonized (won't trigger on empire homeworld)
	## replace_scopes = { this = planet root = planet }
	on_colony_5_years_old = planet

	### 6 years has passed since a planet was colonized (won't trigger on empire homeworld)
	## replace_scopes = { this = planet root = planet }
	on_colony_6_years_old = planet

	### 7 years has passed since a planet was colonized (won't trigger on empire homeworld)
	## replace_scopes = { this = planet root = planet }
	on_colony_7_years_old = planet

	### 8 years has passed since a planet was colonized (won't trigger on empire homeworld)
	## replace_scopes = { this = planet root = planet }
	on_colony_8_years_old = planet

	### 9 years has passed since a planet was colonized (won't trigger on empire homeworld)
	## replace_scopes = { this = planet root = planet }
	on_colony_9_years_old = planet

	### 10 years has passed since a planet was colonized (won't trigger on empire homeworld)
	## replace_scopes = { this = planet root = planet }
	on_colony_10_years_old = planet

	### 25 years has passed since a planet was colonized (won't trigger on empire homeworld)
	## replace_scopes = { this = planet root = planet }
	on_colony_25_years_old = planet

	### Fires for each planet every year (counting up from colonisation date, includes home planet)
	## replace_scopes = { this = planet root = planet }
	on_colony_yearly_pulse = planet

	### Fires for each planet every 5 years (counting up from colonisation date, includes home planet)
	## replace_scopes = { this = planet root = planet }
	on_colony_5_year_pulse = planet

	### Fires for each planet every 10 years (counting up from colonisation date, includes home planet)
	## replace_scopes = { this = planet root = planet }
	on_colony_10_year_pulse = planet

	### a new leader is generated for an empire, to be available for recruitment
	### scope: country, from: leader
	## replace_scopes = { this = country root = country from = leader }
	on_leader_spawned = country

	### called during empire initialization when starting a new game
	### scope: country
	## replace_scopes = { this = country root = country }
	empire_init_add_technologies = country

	#### Called during empire initialization when starting a new game if has_secondary_species game rule is true.
	#### Called before empire_init_create_capital_pops.
	#### scope: planet
	#### from: founder species
	#### fromfrom: secondary species (if exists)
	## replace_scopes = { this = planet root = planet from = species fromfrom = species }
	empire_init_capital_planet = planet

	### called during empire initialization when starting a new game
	### scope: country
	## replace_scopes = { this = country root = country }
	empire_init_create_ships = country

	### Called when an election starts
	### scope: country
	## replace_scopes = { this = country root = country }
	on_election_started = country

	### Called when an election ends
	### scope: country
	## replace_scopes = { this = country root = country }
	on_election_ended = country

	### Called upon entering FTL (on-action name scripted on the Bypass type)
	### THIS = Fleet
	### FROM = System jumping to
	### FROMFROM = System jumped from
	## replace_scopes = { this = fleet root = fleet from = system fromfrom = system }
	on_entering_gateway = fleet

	### Called upon entering FTL (on-action name scripted on the Bypass type)
	### THIS = Fleet
	### FROM = System jumping to
	### FROMFROM = System jumped from
	## replace_scopes = { this = fleet root = fleet from = system fromfrom = system }
	on_entering_wormhole = fleet

	### Called upon entering FTL (on-action name scripted on the Bypass type)
	### THIS = Fleet
	### FROM = System jumping to
	### FROMFROM = System jumped from
	## replace_scopes = { this = fleet root = fleet from = system fromfrom = system }
	on_entering_shroud_tunnel = fleet

	### THIS = Ship
	## replace_scopes = { this = ship root = ship }
	on_jump_drive = ship

	### Called upon a catapult jump being finished, per ship in catapulted fleet
	### THIS = Ship
	### FROM = System jumping to
	### FROMFROM = System jumped from
	## replace_scopes = { this = ship root = ship from = system fromfrom = system }
	on_ship_quantum_catapult = ship

	### Called upon a catapult jump being finished, per fleet
	### THIS = Fleet
	### FROM = System jumping to
	### FROMFROM = System jumped from
	## replace_scopes = { this = fleet root = fleet from = system fromfrom = system }
	on_fleet_quantum_catapult = fleet

	### this = country
	## replace_scopes = { this = country root = country }
	on_pirate_spawn = country

	### Called when a Starbase changes owner
	### THIS = Ship (Starbase)
	### FROM = Former Owner (Country)
	## replace_scopes = { this = ship root = ship from = country }
	on_starbase_transfer = ship

	# Both the following on_action are called when fleet joined combat
	# (The first one is called for the attacker fleet, the second one is called for the defending fleet)

	### This = Aggressor Fleet
	### From = Attacked Fleet
	### FromFrom = Additional Attacked Fleet (if part of ongoing combat)
	### FromFromFrom = Additional Attacked Fleet (if part of ongoing combat)
	## replace_scopes = { this = fleet root = fleet from = fleet fromfrom = fleet fromfromfrom = fleet }
	on_fleet_combat_joined_attacker = fleet

	### This = Attacked Fleet
	### From = Aggressor Fleet
	### FromFrom = Additional Attacked Fleet (if joining ongoing combat)
	### FromFromFrom = Additional Attacked Fleet (if joining ongoing combat)
	## replace_scopes = { this = fleet root = fleet from = fleet fromfrom = fleet fromfromfrom = fleet }
	on_fleet_combat_joined_defender = fleet

	### From = system
	### FromFrom = country (new owner)
	### This = country (previous owner)
	## replace_scopes = { this = country root = country from = system fromfrom = country }
	on_system_lost = country

	### From = system
	### FromFrom = country (previous owner)
	### This = country (new owner)
	## replace_scopes = { this = country root = country from = system fromfrom = country }
	on_system_gained = country

	### This = Pop
	### From = Country (buyer)
	### Fromfrom = Country (seller)
	## replace_scopes = { this = pop root = pop from = country fromfrom = country }
	on_slave_sold_on_market = pop

	### This = Country
	## replace_scopes = { this = country from = country }
	on_relic_activated = country

	### This = Fleet ( science vessel )
	### From = Archaeological Site
	## replace_scopes = { this = fleet root = fleet from = archaeological_site }
	on_arch_stage_finished = fleet

	### A galcom resolution passed
	### this/root = proposer
	### from = target if valid
	### To find out which resolution it was, use last_resolution_changed trigger
	## replace_scopes = { this = country root = country from = any }
	on_resolution_passed = country

	### A galcom resolution failed to pass
	### this/root = proposer
	### from = target if valid
	### To find out which resolution it was, use last_resolution_changed trigger
	## replace_scopes = { this = country root = country from = any }
	on_resolution_failed = country

	### This = Country, first member added
	## replace_scopes = { this = country root = country }
	on_galactic_community_formed = country

	## replace_scopes = { this = country root = country }
	on_galactic_council_established = country

	## replace_scopes = { this = country root = country }
	on_add_community_member = country

	## replace_scopes = { this = country root = country }
	on_remove_community_member = country

	## replace_scopes = { this = country root = country }
	on_add_to_council = country

	## replace_scopes = { this = country root = country }
	on_remove_from_council = country

	## replace_scopes = { this = country root = country }
	on_join_alliance = country

	## replace_scopes = { this = country root = country }
	on_leave_alliance = country

	### This = subject
	### From = subject's overlord
	## replace_scopes = { this = country root = country from = country }
	on_becoming_subject = country

	### fires when a country finishes being integrated
	### This = overlord
	### From = subject
	## replace_scopes = { this = country root = country from = country }
	on_subject_integrated = country

	### fires when a country releases a sector as a vassal
	### This = released vassal
	### From = overlord
	## replace_scopes = { this = country root = country from = country }
	on_released_as_vassal = country

	### This = empire trying to leave federation
	### From = empire who declined (federation leader)
	## replace_scopes = { this = country root = country from = country }
	on_ask_to_leave_federation_declined = country

	### this = owner country, from = spynetwork scope
	## replace_scopes = { this = country root = country from = spynetwork }
	on_spynetwork_formed = country

	### THIS = Country: Emperor
	### FROM = Country added to council
	## replace_scopes = { this = country root = country from = country }
	on_add_to_imperial_council = country

	### THIS = Country: Emperor
	### FROM = Country removed from council
	## replace_scopes = { this = country root = country from = country }
	on_remove_from_imperial_council = country

	### these three are fired from script, basically for modders who want to change how first contact works or add some extra flavour stories in without overwriting things
	### THIS = first_contact
	## replace_scopes = { this = first_contact root = first_contact }
	on_first_contact_started = first_contact

	### use for custom country types that need first contact paths
	### THIS = first_contact
	## replace_scopes = { this = first_contact root = first_contact }
	on_first_contact_stage_1_no_path = first_contact

	### THIS = first_contact
	## replace_scopes = { this = first_contact root = first_contact }
	on_first_contact_generic_stage_2 = first_contact

	### THIS = Planet: Branch office planet
	### FROM = Country: Branch office owner
	## replace_scopes = { this = planet root = planet from = country }
	on_branch_office_established = planet

	### THIS = Planet: Branch office planet
	### FROM = Country: Branch office owner
	## replace_scopes = { this = planet root = planet from = country }
	on_branch_office_closed = planet

	### THIS = System: system being occupied
	### FROM = Country: Conqueror of the system
	### FROMFROM = Country: Original owner of the system
	## replace_scopes = { this = system root = system from = country fromfrom = country }
	on_system_occupied = system

	### THIS = System: system whos controller has changed
	### FROM = Country: New controller of the system
	### FROMFROM = Country: Old controller of the system
	## replace_scopes = { this = system root = system from = country fromfrom = country }
	on_system_controller_changed = system

	### THIS = System: system being returned from occupation
	### FROM = Country: Previous owner of the system
	### FROMFROM = Country: Occupier of the system
	## replace_scopes = { this = system  root = country from = country fromfrom = country }
	on_system_returned = system

	### A planet has been rendered ownerless, it has an orbital ring or similar, though. The orbital ring is still there, but is about to be deleted
	### this = starbase
	### from = planet
	### fromfrom = old owner
	## replace_scopes = { this = starbase root = starbase from = planet fromfrom = country }
	on_orbital_defense_planet_ownerless = starbase

	### THIS = Espionage operation
	### FROM = Operation target
	## replace_scopes = { this = espionage_operation root = espionage_operation from = any }
	on_operation_chapter_finished = espionage_operation

	### THIS = Espionage operation
	### FROM = Operation target
	## replace_scopes = { this = espionage_operation root = espionage_operation from = any }
	on_operation_finished = espionage_operation

	### THIS = Espionage operation
	## replace_scopes = { this = espionage_operation root = espionage_operation }
	on_operation_cancelled = espionage_operation

	### Executed just as country is changing its government, before the new one is applied
	### THIS = country
	## replace_scopes = { this = country root = country }
	on_pre_government_changed = country

	### Executed just as country is changing its government, after the new one is applied
	### THIS = country
	## replace_scopes = { this = country root = country }
	on_post_government_changed = country

	### Executed when the Custodian's term ends
	### THIS = country
	## replace_scopes = { this = country root = country }
	on_custodian_term_ends = country

	### Executed when a country picks any tradition (including starters and finishers)
	### THIS = country
	## replace_scopes = { this = country root = country }
	on_tradition_picked = country

	### Executed when a country picks an ascension perk
	### THIS = country
	## replace_scopes = { this = country root = country }
	on_ascension_perk_picked = country

	### Executed when a megastructure has a new owner
	### this = new owner
	### from = megastructure
	### fromfrom = old owner (if existing)
	## replace_scopes = { this = country root = country from = megastructure fromfrom = country }
	on_megastructure_change_owner = country

	### Executed when a megastructure is rendered ownerless
	### this = solar system containing megastructure
	### from = megastructure
	### fromfrom = old owner (if existing)
	## replace_scopes = { this = system root = system from = megastructure fromfrom = country }
	on_megastructure_ownerless = system

	## replace_scopes = { this = country root = country }
	on_crystalline_empire_task = country

	### Fired from destroy_star_system scripted effect
	### This = system
	### From = destroyer (if using a star cracker)
	## replace_scopes = { this = system root = system from = ship }
	on_destroy_star_system = system

	## replace_scopes = { this = country root = country }
	on_admirals_bickering_event_chain = country

	### Executed when an empire wishes to turn a mercenary fleet into a Mercenary enclave
	### This = fleet
	## replace_scopes = { this = fleet root = fleet }
	on_establish_mercenary_enclave = fleet

	### Fired when a science ship succesfully analyzed or scavenged debris
	### this = country
	### from = debris
	### fromfrom = controller of destroyed ship
	## replace_scopes = { this = country root = country from = deris fromfrom = country }
	on_debris_researched = country

	### Fired when a science ship succesfully analyzed or scavenged debris
	### this = country
	### from = debris
	### fromfrom = controller of destroyed ship
	## replace_scopes = { this = country root = country from = deris fromfrom = country }
	on_debris_scavenged = country

	### Fired when a science ship succesfully analyzed or scavenged debris
	### this = country
	### from = debris
	### fromfrom = controller of destroyed ship
	## replace_scopes = { this = country root = country from = deris fromfrom = country }
	on_debris_scavenged_and_researched = country

	### Fired when a subject has started converting to a specialist type
	### This = agreement
	### owner = overlord
	### target = subject
	## replace_scopes = { this = agreement root = country from = country }
	on_specialist_subject_conversion_started = agreement

	### Fired when a subject has finished converting to a specialist type
	### This = agreement
	### owner = overlord
	### target = subject
	## replace_scopes = { this = agreement root = country from = country }
	on_specialist_subject_conversion_finished = agreement

	### Fired when a subject specialist conversion has been aborted
	### This = agreement
	### owner = overlord
	### target = subject
	## replace_scopes = { this = agreement root = country from = country }
	on_specialist_subject_conversion_aborted = agreement

	### Executed when a two capitals get connected through relay network
	### THIS = Country: Owner
	### FROM = Country: Other
	## replace_scopes = { this = country root = country }
	on_capitals_connected = country

	### Fired when a change to an existing subject agreement has been accepted
	### This = agreement
	### owner = overlord
	### target = subject
	## replace_scopes = { this = agreement root = country from = country }
	on_agreement_change_accepted = agreement

	## replace_scopes = { this = situation root = country from = country }
	on_shroudwalker_divination_visitors_situation = situation

	## replace_scopes = { this = situation root = country from = country }
	on_shroudwalker_divination_locus_situation = situation

	## replace_scopes = { this = situation root = country from = country }
	on_shroudwalker_insight_situation_finish = situation

	### Fired when a fleet activates cloaking
	### This = Fleet
	## replace_scopes = { this = fleet root = fleet }
	on_cloaking_activated = fleet

	### Fired when cloaking is deactivated for a fleet (voluntarily or involuntarily)
	### This = Fleet
	## replace_scopes = { this = fleet root = fleet }
	on_cloaking_deactivated = fleet

	### Fired when a pre-FTL's awareness level increases (by uncloaking ships or using add/set_awareness in events)
	### This = PreFTL Country
	### From = Observing Country
	## replace_scopes = { this = country root = country }
	on_awareness_level_increase = country

	### Fired when a pre-FTL's awareness level decreases (by uncloaking ships or using add/set_awareness in events)
	### This = PreFTL Country
	### From = Observing Country
	## replace_scopes = { this = country root = country }
	on_awareness_level_decrease = country

	### Chance of pre-FTL civilizations to shift their ethics
	## replace_scopes = { this = country root = country }
	on_pre_ftl_pop_ethic_shift = country

	### Fired when a country attacks another country
	### This = attacked country
	### From = attacker country
	## replace_scopes = { this = country root = country }
	on_country_attacked = country

	# Scope:
	# this/root = planet that have been fired upon
	# from = fleet that fired
	# on_destroy_planet_with_PLANET_DESTRUCTION_COMPONENT = {
	# 	events = {
	# 		planet_destruction.1
	# 	}
	# }

	# Note: The _queued on_actions also fire when the command is made even if there is nothing else in the queue
	# Similarly, the _unqueued on_actions fire even if you cancel the order while the weapon is on the wind-up to fire
	# They use the same scopes as the standard events

	## replace_scopes = { this = planet root = planet from = fleet }
	on_destroy_planet_with_<component_template.planet_killer> = planet

	## replace_scopes = { this = planet root = planet from = fleet }
	on_destroy_planet_with_<component_template.planet_killer>_queued = planet

	## replace_scopes = { this = planet root = planet from = fleet }
	on_destroy_planet_with_<component_template.planet_killer>_unqueued = planet
}
