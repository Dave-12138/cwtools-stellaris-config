game_rules = {
	### Root = target country
	### This = country
	## replace_scopes = { this = country root = country }
	is_valid_rival

	## Root = claimer
	## This = system
	## replace_scopes = { this = system root = country }
	can_add_claim

	### Root = taker country
	### This = giver country
	## replace_scopes = { this = country root = country }
	can_get_claim_from_lost_system

	### Root = Bombarding country
	### This = Receiving country
	## replace_scopes = { this = country root = country }
	should_surrender_planets_to

	### Root = country
	### This = species
	## replace_scopes = { this = species root = country }
	species_has_citizenship

	### Root = country
	### This = pop
	## replace_scopes = { this = pop root = country }
	should_abduct_pop

	### Root = planet
	### This = species
	## replace_scopes = { this = species root = planet }
	species_can_live_on_planet

	### Note: this is also used in pop faction support calculations
	### Root = country
	### This = pop
	## replace_scopes = { this = pop root = country }
	can_vote_in_democratic_election

	### This = leader
	## replace_scopes = { this = leader }
	should_pay_for_leader_upkeep

	### Checks whether any leaders (scientists etc) can be formed from this pop
	### Root = country
	### This = pop
	## replace_scopes = { this = pop root = country }
	can_generate_leader_from_pop

	### Checks whether this species is eligible to become rulers through elections
	### Root = country
	### This = species
	## replace_scopes = { this = species root = country }
	can_generate_leader_from_species

	### Checks whether this species can become espionage assets (note that some checks are also done in code)
	### Root = country
	### This = species
	## replace_scopes = { this = species root = country }
	can_create_espionage_asset_from_species

	### Root = country
	### This = pop
	## replace_scopes = { this = pop root = country }
	can_generate_military_leader_from_pop

	### Root = species
	### This = planet
	## replace_scopes = { this = country root = species }
	can_generate_army_from_planet

	### Root = planet
	### This = country
	## replace_scopes = { this = country root = planet }
	can_release_vassal

	### Root = species
	### This = country
	## replace_scopes = { this = country root = species }
	can_release_vassal_from_species

	### Root = species
	### This = country
	## replace_scopes = { this = country root = species }
	can_generate_army_from_species

	### Root = country
	### This = species
	## replace_scopes = { this = country root = species }
	can_modify_species

	### This rule is a condition for when subjects that normally cannot colonize outside their borders are allowed to
	### This = country, suject
	### Root = country, overlord
	### From = target solar system
	## replace_scopes = { this = country root = country from = system }
	subject_can_expand

	### This rule is a condition for taking hostile actions towards neutral targets. Such as landing troops or attacking their fleets
	### Root = country, attacker
	### This = country, target
	## replace_scopes = { this = country root = country }
	can_take_hostile_actions

	### This rule is a condition for declaring war
	### Root = country, attacker
	### This = country, target
	## replace_scopes = { this = country root = country }
	can_declare_war

	### Root = country
	### This = planet
	## replace_scopes = { this = planet root = country }
	can_colonize_planet

	### Root = country
	### This = planet
	## replace_scopes = { this = planet root = country }
	can_colonize_outside_borders

	### Root = country
	### This = planet
	## replace_scopes = { this = planet root = country }
	can_terraform_planet

	### Root = country
	### This = pop
	## replace_scopes = { this = pop root = country }
	can_colonize_with_pop

	### Root = country
	### This = species
	## replace_scopes = { this = species root = country }
	can_colonize_with_species

	### NOTE: species_has_happiness is also checked for this
	### Root = Pop
	### This = Pop
	### From = Country
	## replace_scopes = { this = pop root = pop from = country }
	pop_has_random_ethics

	### Root = Species
	### From = Country
	### This = Species
	## replace_scopes = { this = species root = species from = country }
	species_has_happiness

	### This rule is a condition for determining if a country is hostile towards another. not to be confused with can_take_hostile_action
	### Root = country, us
	### This = country, them
	## replace_scopes = { this = country root = country }
	can_be_hostile_towards

	### Checks if a pop can procreate
	### This = Species
	### Root = Planet
	## replace_scopes = { this = species root = planet }
	can_species_procreate

	### Checks if a pop can be assembled
	### This = Species
	### Root = Planet
	## replace_scopes = { this = species root = planet }
	can_species_be_assembled

	### This rule is a condition for bombarding planets
	### Root = fleet, potential attacker
	### From = planet, potential target
	## replace_scopes = { this = fleet root = fleet from = planet }
	can_orbital_bombard

	### Check if it is possible to build orbital stations on this planet
	### this: planet
	### root: country
	## replace_scopes = { this = planet root = country }
	can_planet_support_orbital_station

	### Check if full sensor range in entire galaxy
	### root: country
	## replace_scopes = { this = country root = country }
	has_full_sensor_range

	### Determines if notification messages should be sent after a ground combat
	### this: planet
	### from: winner
	### root: loser
	## replace_scopes = { this = planet root = country from = country }
	show_notification_for_ground_combat

	### Determines if the "per_neighbor_rival" static modifier should be applied to an empire
	### this: country
	## replace_scopes = { this = country }
	should_apply_neighbor_rival_modifier

	### Root: Rebelling against country
	### This: Rebel country
	## replace_scopes = { this = country root = country }
	are_rebels_hostile

	### Root: planet
	## replace_scopes = { this = planet root = planet }
	should_colony_be_destroyed_on_pc_change

	### Is the given fleet the portal for given extradimensional country
	### root: country (ED)
	### this: fleet
	## replace_scopes = { this = fleet root = country }
	is_extradimensional_portal

	### Is the given fleet an anchor for given extradimensional country
	### root: country (ED)
	### this: fleet
	## replace_scopes = { this = fleet root = country }
	is_extradimensional_anchor

	### Will colonizing this planet tick off a fallen empire?
	### Root = fallen empire
	### This = planet
	## replace_scopes = { this = planet root = country }
	will_anger_fallen_empire

	### Can the country have robot pop
	### root: country
	## replace_scopes = { this = country root = country }
	can_have_robot_pops

	### Can purge/disassembly be individually stopped by owner
	### scope: pop
	## replace_scopes = { this = pop }
	can_stop_purge_pop_manually

	### Can the pop be purged/disassembled individually by its owner
	### scope: pop
	## replace_scopes = { this = pop }
	can_purge_pop_manually

	### THIS = Fleet
	## replace_scopes = { this = fleet }
	fleet_uses_templates

	### this = starbase, megastructure or planet
	can_orbitable_repair_ships

	### this = ship
	### root = country that kills ship
	## replace_scopes = { this = ship root = country }
	can_spawn_debris

	### Determines if AI-controlled empires should restrict (and thus avoid) a system
	### Used by regular empires, fallen empires & crises
	### this = system
	### root = country
	## replace_scopes = { this = system root = country }
	ai_should_restrict_system

	### this = country
	## replace_scopes = { this = country }
	can_subjugate_empires

	### this = leader
	## replace_scopes = { this = leader }
	can_leader_get_council_trait

	### this = leader
	## replace_scopes = { this = leader }
	can_leader_get_normal_trait

	### this = leader
	## replace_scopes = { this = leader }
	can_leader_get_subclass_trait

	### this = leader
	## replace_scopes = { this = leader }
	can_leader_get_destiny_trait

	### this = country
	## replace_scopes = { this = country }
	has_extra_council_position

	### THIS = Fleet
	## replace_scopes = { this = fleet }
	can_jump_drive

	### this = country
	## replace_scopes = { this = country }
	can_spawn_occupation_armies

	### this = system
	### root = country
	## replace_scopes = { this = system root = country }
	system_blocks_sensors

	### Root = country attempting to target system for movement
	### This = system being targeted
	## replace_scopes = { this = system root = country }
	can_enter_system_by_jump

	### This = pop
	## replace_scopes = { this = pop }
	can_resettle_pop

	## replace_scopes = { this = country }
	can_country_resettle

	### This = Planet
	## replace_scopes = { this = planet }
	can_resettle_planet

	## replace_scopes = { this = planet }
	can_resettle_planet_no_owner_check

	### This = Planet
	## replace_scopes = { this = planet }
	should_spawn_deposits

	### # This = Planet
	## replace_scopes = { this = planet }
	is_new_colony

	### This = pop
	## replace_scopes = { this = pop }
	pop_generates_crime

	### This = planet
	## replace_scopes = { this = planet }
	can_pops_grow_on_planet

	### This = planet
	## replace_scopes = { this = planet }
	can_pops_assemble_on_planet

	### This = planet
	## replace_scopes = { this = planet }
	can_pops_decline_on_planet

	### This = planet
	### Root = country
	## replace_scopes = { this = planet root = country }
	can_force_grow_on_planet

	### This = planet
	### Root = country
	## replace_scopes = { this = planet root = country }
	can_force_decline_on_planet

	### This = species
	### Root = country
	## replace_scopes = { this = species root = country }
	can_force_decline_species

	### If this returns true, the species will be set to decline even if it is not being purged
	### Note: success text tooltips are shown in alert_pops_declining alert.
	### This = species
	### From = planet
	## replace_scopes = { this = species root = species from = planet }
	should_force_decline_species

	### This = country
	## replace_scopes = { this = country }
	can_build_branch_offices

	### This = country
	## replace_scopes = { this = country }
	can_support_branch_offices

	### This = planet
	### Root = country
	## replace_scopes = { this = planet root = country }
	can_build_branch_office_on_planet

	### Checked by is_criminal_syndicate trigger
	### This = country
	## replace_scopes = { this = country }
	is_criminal_syndicate_rule

	### This = planet
	## replace_scopes = { this = planet }
	can_crossbreed_species_on_planet

	### This = species one
	### Root = species two
	## replace_scopes = { this = species root = species }
	can_crossbreed_species

	## replace_scopes = { this = no_scope }
	can_win_timed_victory

	### This = country
	## replace_scopes = { this = country }
	can_use_galactic_market

	### ROOT = country
	### THIS = pop
	## replace_scopes = { this = pop root = country }
	can_be_sold_on_slave_market

	### This = country
	## replace_scopes = { this = country }
	can_be_part_of_galactic_community

	### This = country
	## replace_scopes = { this = country }
	can_be_part_of_galactic_empire

	### This = country
	## replace_scopes = { this = country }
	can_see_galactic_community

	### This = country
	## replace_scopes = { this = country }
	can_be_part_of_galactic_council

	### If, 'yes', forces an empire to be advanced at game start (overrides game settings)
	### This = country
	## replace_scopes = { this = country }
	must_be_advanced_empire

	### If 'no', blocks an empire from being advanced at game start (overrides 'must_be_advanced_empire' above)
	### This = country
	## replace_scopes = { this = country }
	is_allowed_to_be_advanced_empire

	### This = planet
	## replace_scopes = { this = planet }
	has_enough_pops_for_necrophage_on_planet

	### Root = current planet
	### This = pop
	### Purge, Sapience, Migration Controls policy (ignored by Gestalts and Synths), and target habitability are checked in code.
	## replace_scopes = { this = pop root = planet }
	can_pop_auto_migrate

	### Checked before can_pop_auto_migrate to save performance
	### This = planet
	## replace_scopes = { this = planet }
	can_planet_auto_migrate

	## replace_scopes = { this = planet }
	can_planet_receive_auto_migration

	### This, root = country
	## replace_scopes = { this = country root = country }
	can_gene_mod_habitability

	### This, root = country
	## replace_scopes = { this = country root = country }
	can_add_advanced_traits

	### This, root = country
	## replace_scopes = { this = country root = country }
	can_add_negative_traits_organic

	### This, root = country
	## replace_scopes = { this = country root = country }
	can_remove_positive_traits_organic

	### This, root = country
	## replace_scopes = { this = country root = country }
	can_modify_organic_portraits

	### Final check for whether there should be a first contact site spawned. Main check is via country type contact_rule, in code.
	### This = country contacting
	### From = target country
	## replace_scopes = { this = country from = country }
	can_have_first_contact

	### Root = Country with envoys to send
	### This = Imperium leader country
	## replace_scopes = { this = country root = country }
	can_use_envoys_to_raise_imperial_authority

	### Root = Country with envoys to send
	### This = Imperium leader country
	## replace_scopes = { this = country root = country }
	can_use_envoys_to_lower_imperial_authority

	### checked if job's possible_precalc = can_fill_drone_job
	### this/root = pop
	## replace_scopes = { this = pop root = pop }
	can_fill_drone_job

	### checked if job's possible_precalc = can_fill_specialist_job
	### this/root = pop
	## replace_scopes = { this = pop root = pop }
	can_fill_specialist_job

	### checked if job's possible_precalc = can_fill_precursor_job
	### this/root = pop
	## replace_scopes = { this = pop root = pop }
	can_fill_ruler_job

	### checked if job's possible_precalc = can_fill_ruler_job
	### this/root = pop
	## replace_scopes = { this = pop root = pop }
	can_fill_precursor_job

	### checked if job's possible_precalc = can_fill_worker_job
	### this/root = pop
	## replace_scopes = { this = pop root = pop }
	can_fill_worker_job

	### Checks whether the game should try and build a building or district on a planet via scripts in common/colony_automation
	### Does not apply to "emergency building" (colony_automation_exceptions)
	### this = planet
	## replace_scopes = { this = planet }
	should_planetary_automate

	## replace_scopes = { this = country }
	dismiss_leader_cost = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### this = leader
	## replace_scopes = { this = leader }
	can_dismiss_leader

	# this = country
	## replace_scopes = { this = country }
	can_country_change_councilors =  {}

	### this = leader
	## replace_scopes = { this = leader }
	should_count_towards_leader_cap

	### From = country, country that tries to connect using relay network
	### ROOT/This = country, target country to connect to using relay network
	## replace_scopes = { this = country root = country }
	can_country_connect_to_relay_network

	### this = planet
	## replace_scopes = { this = planet }
	should_ai_build_stronghold_on_vulnerable_planet

	### This = leader
	## replace_scopes = { this = leader }
	will_leader_retire

	### This = country, Country that wants to get an external leader
	### From = country, country that we are trying to get from
	## replace_scopes = { this = country root = country }
	can_get_external_leader_pool_candidate

	### This = leader, leader we'd like to trade
	### Root = country, country that owns the leader currently
	### From = country, country that would receive the leader
	## replace_scopes = { this = leader root = country from = country }
	can_trade_leader

	## replace_scopes = { this = country }
	chance_for_external_leader_pool = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### this = country scope
	## replace_scopes = { this = country }
	council_agenda_early_activation_cost = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### this = leader scope
	### from = country scope
	## replace_scopes = { this = leader from = country }
	leader_election_elect_cost = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### this = country scope
	## replace_scopes = { this = country }
	emergency_election_cost_rule = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### this = leader scope (not valid in UI if no leader is selected)
	### from = country scope
	## replace_scopes = { this = leader from = country }
	leader_election_support_cost = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### this = leader scope
	## replace_scopes = { this = leader }
	leader_election_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### This = fleet, fleet we'd like to trade
	### Root = country, country that owns the fleet currently
	### From = country, country that would receive the fleet
	## replace_scopes = { this = fleet root = country from = country }
	can_trade_fleet

	### this = leader
	### from = country scope
	## replace_scopes = { this = leader from = country }
	can_leader_be_ruler

	### this = leader
	### from = country scope
	## replace_scopes = { this = leader from = country }
	can_leader_be_councilor

	### Determines if pre-ftl country is unaware of alien life
	### this: pre-ftl country
	## replace_scopes = { this = country }
	are_pre_ftls_unaware

	### Checked if planet is a terraforming candidate
	### This = planet
	## replace_scopes = { this = planet }
	is_terraforming_candidate

	### Checked if the planet is special terraforming candidate and the country has the required matching ascension perk to do it
	### Root = country
	### This = planet
	## replace_scopes = { this = planet root = country }
	has_ascension_for_terraforming_candidate

	### Checks if the planet (from) can be renamed by the country (this) that contains it in its borders, even if it has a different owner (Root)
	### Renaming is never possible if the planet is not in your borders; and it is always possible if it is in your borders but the owner is yourself/no-one
	### This = country that tries to rename
	### Root = country owning the planet
	### From = planet
	## replace_scopes = { this = country root = country from = planet }
	can_be_renamed_by

	### Checks if the country is allowed to build any orbital station around this planet/star
	### Root/this = country
	### From = planet
	## replace_scopes = { this = country root = country from = planet }
	can_build_station_around

	### Checks if the country is allowed to build a mining station around this planet/star
	### Root/this = country
	### From = planet
	## replace_scopes = { this = country root = country from = planet }
	can_build_mining_station_around

	### Checks if the country is allowed to build a research station around this planet/star
	### Root/this = country
	### From = planet
	## replace_scopes = { this = country root = country from = planet }
	can_build_research_station_around

	### Checks if the country is allowed to build a military station around this planet/star
	### Root/this = country
	### From = planet
	## replace_scopes = { this = country root = country from = planet }
	can_build_military_station_around

	### Checks if the country is allowed to build an observation station around this planet/star
	### Root/this = country
	### From = planet
	## replace_scopes = { this = country root = country from = planet }
	can_build_observation_station_around

	### Checks if the country is allowed to build a starbase around this planet/star
	### Root/this = country
	### From = planet
	## replace_scopes = { this = country root = country from = planet }
	can_build_starbase_around

	### Checks if the country's capital has any kind of relevancy (aka is the capital in the galaxy really theirs)
	### Root/this = country
	## replace_scopes = { this = country root = country }
	has_inworld_capital

	### Checks if target country has economy power relative to begin with
	### Root/this = trading country
	### From = country traded with
	## replace_scopes = { this = country root = country from = country }
	has_relative_economy_power

	### Checks if the country can trade sensor
	### Root/this = trading country
	### From = country traded with
	## replace_scopes = { this = country root = country from = country }
	can_trade_sensor

	### Checks if the country can trade favor
	### Root/this = trading country
	### From = country traded with
	## replace_scopes = { this = country root = country from = country }
	can_trade_favor

	### THIS = country
	### FROM = Astral Rift checked
	## replace_scopes = { this = country from = astral_rift }
	can_interact_with_astral_rift

	### THIS = country
	### FROM = Astral Rift checked
	## replace_scopes = { this = country from = astral_rift }
	can_explore_astral_rift

	### Checks if the selected leader can explore the rift
	### THIS = leader
	### FROM = Astral Rift checked
	## replace_scopes = { this = leader from = astral_rift }
	can_leader_explore_astral_rift

	### FROM = country of the ai (in case it's relevant)
	### THIS = planet
	### this determines if the planet is allowed to receive a governor at all, and isn't called for a specific candidate
	## replace_scopes = { this = planet from = country }
	can_ai_assign_governor

	### if the galactic community exists, is a galactic empire, and the country is part of it
	### the ai will call this to see if it should set its delegate to strengthn it
	### It is guaranteed that the galactic community exists, is an empire, and the country is part of it
	### when this rule is called
	### THIS = Country
	### FROM = Galactic Emperor (Country)
	## replace_scopes = { this = country from = country }
	should_ai_support_galactic_empire

	### if the galactic community exists, is a galactic empire, and the country is part of it
	### and if it didn't decided to strengthen the empire,
	### the ai will call this to see if it should set its delegate to undermine it
	### if the ai neither wants to support nor undermine the galactic empire, it will just keep
	### its emissary as a standard delegate
	### It is guaranteed that the galactic community exists, is an empire, and the country is part of it
	### when this rule is called
	### THIS = Country
	### FROM = Galactic Emperor (Country)
	## replace_scopes = { this = country from = country }
	should_ai_undermine_galactic_empire
}