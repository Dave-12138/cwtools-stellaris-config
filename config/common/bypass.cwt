types = {
	type[bypass] = {
		path = "game/common/bypass"
		file_extension = .txt
		subtype[scripted] = {
			connection_type = scripted_connection
		}
	}
}

### These defines the type of bypasses that exist in game. This is only the logical connection between system
### These can be added to megastructures
bypass = {
	### the localization key used in triggers and effects for the type
	name = localisation
	### whether this type can be automatically used by the pathfinding (otherwise you'll have to right click the object containing it)
	is_pathfind = bool
	### whether this bypass type needs to be 'seen' before it can be used
	## cardinality = 0..1
	requires_exploration = bool
	### whether use of this bypass type is blocked if the destination country has closed borders to you (default: no)
	## cardinality = 0..1
	respect_closed_borders = bool
	### whether use of this bypass type is blocked if the destination country is hostile to you (default: no)
	## cardinality = 0..1
	block_access_if_hostile = bool
	### whether this type needs an action or can be used automagically
	uses_action = bool
	### whether bypasses of these types are automatically active on creation, or if they need to be researched/upgraded to be activated
	always_active = bool
	### time spent "prepping" in the system before going through the bypass
	windup_time = int
	### time spent "recovering" in the system after going through the bypass
	winddown_time = int
	### 0 means instant
	## cardinality = 0..1
	ftl_multiplier = float
	### whether you can "see through" the bypass and extends your sensor range to the other side
	## cardinality = 0..1
	extends_sensors = bool
	icon_frame = int
	### whether countries remember meeting a specific instance of that type, or if they just remember seeing the type in general
	remember_instances = bool
	galactic_map_tooltip_header = localisation
	galactic_map_tooltip_desc = localisation
	## cardinality = 0..1
	system_view_tooltip_header = localisation
	connection_type = enum[bypass_connection_type]
	### what effect to spawn on the ship when they jump through the bypass
	ftl_ship_effect = <model_entity>
	### what effect to spawn on the bypass when a ship jumps through
	ftl_bypass_effect = <model_entity>
	### default: no
	## cardinality = 0..1
	can_bypass_be_locked = bool
	## cardinality = 0..1
	bypass_effect = <model_entity>
	### number of days to wait for the jump animation to be played
	animation_time = int
	## cardinality = 0..1
	prerequisites = {
		## cardinality = 0..inf
		<technology>
	}
	### an effect that is called just before the jump of a right click "explore" action of a fleet
	## cardinality = 0..1
	on_pre_explore = single_alias_right[effect_clause]
	### trigger to evaluate if a country can use bypasses of this type. this: country, from: (optional) system owner; default: { always = yes }
	## cardinality = 0..1
	## replace_scopes = { root = country this = country from = country }
	country_can_use = single_alias_right[trigger_clause]
	#unsure about scope here
	## cardinality = 0..1
	potential = single_alias_right[trigger_clause]
	### The name of the on-action event that will be fired upon entering FTL (if set)
	### THIS = Fleet
	### FROM = System jumping to
	### FROMFROM = System jumped from
	## cardinality = 0..1
	on_action = <on_action>
	subtype[scripted] = {
		scripted_connection = {
			### defines endpoints that can only reach the "nexus"
			## replace_scopes = { this = system root = system }
			node = single_alias_right[trigger_clause]
			### defines endpoint(s) that can reach all "nodes" (but not other nexuses)
			## replace_scopes = { this = system root = system }
			nexus = single_alias_right[trigger_clause]
		}
	}
}

enums = {
	enum[bypass_connection_type] = {
		any_other
		one_to_one
		scripted_connection
		hyper_relay
		to_any_system
	}
}
