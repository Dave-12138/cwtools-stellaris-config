types = {
	## type_key_filter = empire_name_parts_list
	type[empire_name_parts_list] = {
		path = "game/common/random_names"
		file_extension = .txt
		name_field = key
	}
	## type_key_filter = empire_name_format
	type[empire_name_format] = {
		path = "game/common/random_names"
		file_extension = .txt
		# name_field = format
	}
	## type_key_filter = federation_name_parts_list
	type[federation_name_parts_list] = {
		path = "game/common/random_names"
		file_extension = .txt
		name_field = key
	}
	## type_key_filter = federation_name_format
	type[federation_name_format] = {
		path = "game/common/random_names"
		file_extension = .txt
		# name_field = format
	}
	## type_key_filter = pop_faction_name_parts_list
	type[pop_faction_name_parts_list] = {
		path = "game/common/random_names"
		file_extension = .txt
		name_field = key
	}
	## type_key_filter = pop_faction_name_format
	type[pop_faction_name_format] = {
		path = "game/common/random_names"
		file_extension = .txt
		# name_field = format
	}
	## type_key_filter = pre_communications_name_parts_list
	type[pre_communications_name_parts_list] = {
		path = "game/common/random_names"
		file_extension = .txt
		name_field = key
	}
	## type_key_filter = pre_communications_name_format
	type[pre_communications_name_format] = {
		path = "game/common/random_names"
		file_extension = .txt
		# name_field = format
	}
	## type_key_filter = war_name_parts_list
	type[war_name_parts_list] = {
		path = "game/common/random_names"
		file_extension = .txt
		name_field = key
	}
	## type_key_filter = war_name_format
	type[war_name_format] = {
		path = "game/common/random_names"
		file_extension = .txt
		# name_field = format
	}
}

### Define possible parts of empire name here, such as "Glorious Empire of". When generating random name for empire, format can refer to it via <key> and pick random part.
empire_name_parts_list = {
	### Unique ID by which list can be referred to from name format via <key>.
	key = value_set[empire_name_parts]
	### List of possible parts. Random weights to the right are optional
	parts = {
		## cardinality = 0..inf
		localisation = int
		## cardinality = 0..inf
		localisation
	}
}

### This block contains rules for picking a specific name format
empire_name_format = {
	## replace_scope = { root = country this = country }
	### Conditional weight for choosing this format
	random_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
	### Format string for generating random name (proper noun form)
	format = stellaris_name_format[empire_name_parts]
	### String used to determine prefix for empire's ship. (Default being ISS). Usually matches name format. Optional for countries that would not ever have ships, e. g. Primitives.
	## cardinality = 0..1
	prefix_format = stellaris_name_format[empire_name_parts]
	## cardinality = 0..1
	noun = stellaris_name_format[empire_name_parts]
	### Format string for generating random name (adjective form)
	## cardinality = 0..1
	adjective = stellaris_name_format[empire_name_parts]
}

### Define possible parts of federation name here. When generating random name for federation, format can refer to it via <key> and pick random part.
federation_name_parts_list = {
	### Unique ID by which list can be referred to from name format via <key>.
	key = value_set[federation_name_parts]
	### List of possible parts. Random weights to the right are optional
	parts = {
		## cardinality = 0..inf
		localisation = int
		## cardinality = 0..inf
		localisation
	}
}

### This block contains rules for picking a specific name format
federation_name_format = {
	## replace_scope = { root = federation this = federation }
	### Conditional weight for choosing this format
	random_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
	### Format string for generating random name (proper noun form)
	format = stellaris_name_format[federation_name_parts]
}

pop_faction_name_parts_list = {
	key = value_set[pop_faction_name_parts]
	parts = {
		## cardinality = 0..inf
		localisation = int
		## cardinality = 0..inf
		localisation
	}
}

pop_faction_name_format = {
	## replace_scope = { root = pop_faction this = pop_faction }
	### Conditional weight for choosing this format
	random_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
	### Format string for generating random name (proper noun form)
	format = stellaris_name_format[pop_faction_name_parts]
}

pre_communications_name_parts_list = {
	key = value_set[pre_communications_name_parts]
	## cardinality = 0..1
	cyclic = yes
	parts = {
		## cardinality = 0..inf
		localisation = int
		## cardinality = 0..inf
		localisation
	}
}

pre_communications_name_format = {
	## replace_scope = { root = country this = country }
	### Conditional weight for choosing this format
	random_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
	### Format string for generating random name (proper noun form)
	format = stellaris_name_format[pre_communications_name_parts]
}

war_name_parts_list = {
	key = value_set[war_name_parts]
	parts = {
		## cardinality = 0..inf
		localisation = int
		## cardinality = 0..inf
		localisation
	}
}

war_name_format = {
	## replace_scope = { root = war this = war }
	### Conditional weight for choosing this format
	random_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
	### Format string for generating random name (proper noun form)
	format = stellaris_name_format[war_name_parts]
}