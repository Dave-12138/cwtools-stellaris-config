types = {
	type[district] = {
		path = "game/common/districts"
		file_extension = .txt
		subtype[capped] = {
			## cardinality = 0..1
			is_capped_by_modifier = yes
		}
		subtype[uncapped] = {
			is_capped_by_modifier = no
		}
		localisation = {
			## required
			Name = "$"
			## required
			Desc = "$_desc"
			## required
			Plural = "$_plural"
		}
		images = {
			## primary
			## required
			icon = "#icon" # icon[gfx/interface/icons/districts]
			## primary
			## required
			icon = "gfx/interface/icons/districts/$.dds" # inferred
		}
	}
}

## push_scope = planet
district = {
	### default: no
	## cardinality = 0..1
	expansion_planner = bool

	## cardinality = 0..1
	base_buildtime = int
	## cardinality = 0..inf
	desc = localisation
	## cardinality = 0..inf
	desc = {
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		text = localisation
	}
	## cardinality = 0..1
	min_for_deposits_on_planet = int
	## cardinality = 0..1
	max_for_deposits_on_planet = int

	## cardinality = 0..1
	icon = icon[gfx/interface/icons/districts]
	## cardinality = 0..1
	is_capped_by_modifier = bool
	## cardinality = 0..1
	### whether this district is exempt from being swapped into groups by the AI; default: no
	exempt_from_ai_planet_specialization = bool
	## cardinality = 0..1
	can_demolish = bool

	## cardinality = 0..1
	destroy_trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	## replace_scopes = { root = country this = country }
	show_tech_unlock_if = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	show_on_uncolonized = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	allow = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	on_queued = {
		alias_name[effect] = alias_match_left[effect]
	}
	## cardinality = 0..1
	on_unqueued = {
		alias_name[effect] = alias_match_left[effect]
	}
	## cardinality = 0..1
	on_built = {
		alias_name[effect] = alias_match_left[effect]
	}

	## cardinality = 0..1
	prerequisites = {
		## cardinality = 0..inf
		<technology>
	}

	## cardinality = 0..1
	conversion_ratio = float
	## cardinality = 0..1
	convert_to = {
		## cardinality = 1..inf
		<district>
	}

	resources = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}

	## cardinality = 0..1
	## replace_scopes = { this = planet root = planet }
	planet_modifier = single_alias_right[modifier]

	## cardinality = 0..inf
	## replace_scopes = { this = planet root = planet }
	triggered_planet_modifier = single_alias_right[triggered_modifier]

	## cardinality = 0..inf
	triggered_desc = single_alias_right[triggered_desc]

	## cardinality = 0..1
	ai_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..inf
	ai_resource_production = {
		<resource> = int
		## cardinality = 0..1
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..inf
		enum[complex_maths_enum] = value_field
	}
}
