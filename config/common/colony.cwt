types = {
	type[colony_type] = {
		path = "game/common/colony_types"
		file_extension = .txt
		localisation = {
			## required
			Name = "$"
			## required
			Description = "$_desc"
		}
		images = {
			## primary
			icon = "#icon" # <sprite>
		}
	}
	type[colony_automation] = {
		path = "game/common/colony_automation"
		file_extension = .txt
		path_strict = yes
	}
	type[colony_automation_category] = {
		path = "game/common/colony_automation_categories"
		file_extension = .txt
	}
	type[colony_automation_exception] = {
		path = "game/common/colony_automation_exceptions"
		file_extension = .txt
	}
}

## push_scope = planet
colony_type = {
	icon = <sprite>

	### Used by AI to estimate what will happen when we change the designation
	## cardinality = 0..1
	ai_resource_conversion = {
		## cardinality = 0..inf
		<resource> = float
		## replace_scope = { this = planet root = planet }
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}

	### Used by AI to estimate the current effects of this designation
	## cardinality = 0..1
	ai_resource_current_conversion = {
		## cardinality = 0..inf
		<resource> = float
		## replace_scope = { this = planet root = planet }
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}

	potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	custom_tooltip = localisation
	## cardinality = 0..1
	## replace_scope = { this = planet root = planet }
	planet_modifier = {
		## cardinality = 0..1
		custom_tooltip = localisation
		alias_name[modifier] = alias_match_left[modifier]
	}

	## replace_scope = { this = planet root = planet }
	alias_name[triggered_planet_modifier] = alias_match_left[triggered_planet_modifier]

	weight_modifier = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
}

## push_scope = planet
colony_automation = {
	category = <colony_automation_category>

	available = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	prio_districts = {
		## cardinality = 0..inf
		<district>
	}

	buildings = {
		## cardinality = 1..inf
		int[1..inf] = {
			building = <building>
			## cardinality = 0..1
			available = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}
	}
}

## push_scope = planet
colony_automation_category = {
	## cardinality = 0..1
	available = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

## push_scope = planet
colony_automation_exception = {
	category = <colony_automation_category>
	### default: no
	## cardinality = 0..1
	emergency = bool
	### default: no
	## cardinality = 0..1
	empire_wide_emergency = bool
	### default: no
	## cardinality = 0..1
	should_ai_use_job_micro = bool

	available = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	prio_districts = {
		## cardinality = 0..inf
		<district>
	}

	## cardinality = 0..1
	buildings = {
		## cardinality = 1..inf
		scalar = {
			building = <building>
			## cardinality = 0..1
			available = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			## cardinality = 0..1
			upgrade_trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
		}
	}

	## cardinality = 0..1
	job_changes = {
		scalar = {
			## cardinality = 0..1
			available = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			job = <job>
			amount = int
		}
	}
}