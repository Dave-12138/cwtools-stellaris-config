types = {
	type[authority] = {
		path = "game/common/governments/authorities"
		file_extension = .txt
		localisation = {
			## required
			name = "$"
			## required
			desc = "$_desc"
		}
		images = {
			## primary
			## required
			icon = "#icon" # filepath
			## primary
			## required
			icon = "gfx/interface/icons/governments/authorities/$.dds" # inferred
		}
	}
	type[government] = {
		path = "game/common/governments"
		file_extension = .txt
		path_strict = yes
		localisation = {
			## required
			name = "$"
			## required
			desc = "$_desc"
		}
	}
	type[civic_or_origin] = {
		path = "game/common/governments/civics"
		file_extension = .txt
		localisation = {
			## required
			name = "$"
			## required
			desc = "$_desc"
			effect = "#description"
		}
		subtype[civic] = {
			## cardinality = 0..1
			is_origin = no
		}
		subtype[origin] = {
			is_origin = yes
		}
		images = {
			## primary
			## required
			icon = "#icon" # filepath
			subtype[civic] = {
				## primary
				## required
				icon = "gfx/interface/icons/governments/civics/$.dds" # inferred
			}
			subtype[origin] = {
				## primary
				## required
				icon = "gfx/interface/icons/origins/$.dds" # inferred
				picture = "#picture" # <sprite>
			}
		}
	}
	## type_key_filter = swap_type
	type[swapped_civic] = {
		base_type = civic_or_origin.civic
		path = "game/common/governments/civics"
		file_extension = .txt
		skip_root_key = any
		name_field = "name"
		localisation = {
			## required
			name = "$"
			## required
			desc = "$_desc"
			effect = "#description"
		}
	}
	type[councilor] = {
		path = "game/common/governments/councilors"
		file_extension = .txt
		path_strict = yes
		subtype[civic_councilor] = {
			civic = scalar
		}
		localisation = {
			## required
			name = "$"
			## required
			desc = "$_desc"
		}
		images = {
			icon = "#icon" # <sprite>
		}
	}
}

authority = {
	## cardinality = 0..1
	machine_empire = yes
	## cardinality = 0..1
	icon = filepath
	## cardinality = 0..1
	has_heir = bool
	## cardinality = 0..1
	election_type = enum[election_types]
	## cardinality = 0..1
	### default = 0, hence required if defined to oligarchic or democratic
	election_term_years = int
	## cardinality = 0..1
	### acts like random = int
	election_term_variance = int
	## cardinality = 0..1
	re_election_allowed = bool
	## cardinality = 0..1
	can_have_emergency_elections = bool
	## cardinality = 0..1
	### influence cost!
	emergency_election_cost = int
	## cardinality = 0..1
	### default = -1, which equals limitless
	max_election_candidates = int
	## cardinality = 0..1
	can_reform = bool
	### is tied to the agena files if = yes
	## cardinality = 0..1
	has_agendas = bool
	### is tied to the mandate files if = yes
	## cardinality = 0..1
	uses_mandates = bool
	## cardinality = 0..1
	has_factions = bool
	## cardinality = 0..1
	valid_for_released_vassal = bool
	## cardinality = 0..1
	localization_postfix = enum[authority_postfixes]
	## cardinality = 0..1
	localization_postfix = scalar

	ruler_council_position = <councilor>

	## cardinality = 0..1
	potential = {
		## cardinality = 0..1
		text = localisation
		## cardinality = 0..1
		always = bool

		alias_name[government_trigger] = alias_match_left[government_trigger]
	}
	## cardinality = 0..1
	playable = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	possible = {
		## cardinality = 0..1
		text = localisation
		## cardinality = 0..1
		always = bool

		alias_name[government_trigger] = alias_match_left[government_trigger]
	}
	## replace_scope = { this = no_scope root = no_scope } #this can check has_dlc and other likewise triggers, but thats it.
	## cardinality = 0..1
	random_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
	## replace_scope = { this = country root = country }
	## cardinality = 0..1
	ai_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
	## cardinality = 0..1
	traits = {
		## cardinality = 0..inf
		trait = <trait>
	}
	## cardinality = 0..1
	## replace_scope = { this = country root = country }
	country_modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
	## cardinality = 0..1
	tags = {
		## cardinality = 1..inf
		localisation
	}
}

enums = {
	enum[election_types] = {
		none
		oligarchic
		democratic
	}
	enum[authority_postfixes] = {
		hive_mind
		machine_intelligence
	}
}

government = {
	### Determines if a government name can be chosen. AND trigger, scope: country; valid triggers: has_ethic, has_authority, has_valid_civic; everything else is undefined behavior!
	## replace_scope = { this = country root = country }
	possible = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	### scriptable value, scope: country; the (possible) government type with the biggest weight is assigned to the country
	## replace_scope = { this = country root = country }
	weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
	ruler_title = localisation
	## cardinality = 0..1
	ruler_title_female = localisation
	## cardinality = 0..1
	heir_title = localisation
	## cardinality = 0..1
	heir_title_female = localisation
	## cardinality = 0..1
	use_regnal_names = bool
	## cardinality = 0..1
	dynastic_last_names = bool
	## cardinality = 0..1
	should_force_rename = bool
	## cardinality = 0..1
	leader_class = enum[leader_classes_no_ruler]

	## cardinality = 0..1
	## replace_scope = { this = leader root = leader }
	election_candidates = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
}

civic_or_origin = {
	### AND trigger, no scope; use this to prevent the civic from being selectable by the player (UI). Possibly only works with DLC checks.
	## cardinality = 0..1
	## replace_scope = { this = no_scope root = no_scope }
	playable = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	### AND trigger, no scope; use this to prevent the civic from being selectable by the AI. Possibly only works with DLC checks.
	## cardinality = 0..1
	## replace_scope = { this = no_scope root = no_scope }
	ai_playable = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	### requirements list, supports country_type, ethics, authority and civics. See ../readme_requirements.txt
	## cardinality = 0..1
	possible = {
		## cardinality = 0..1
		text = localisation
		## cardinality = 0..1
		always = bool

		alias_name[government_trigger] = alias_match_left[government_trigger]
	}

	### requirements list, supports country_type, ethics, authority and civics. See ../readme_requirements.txt
	## cardinality = 0..1
	potential = {
		## cardinality = 0..1
		text = localisation
		## cardinality = 0..1
		always = bool

		alias_name[government_trigger] = alias_match_left[government_trigger]
	}

	## cardinality = 0..1
	icon = filepath
	### localisation of custom effects
	## cardinality = 0..1
	description = localisation
	### scriptable weight for randomizing a civic; required, else the civic will not get assigned randomly
	## cardinality = 0..1
	## replace_scope = { this = country root = country }
	random_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### modifier added to the country if the civic is selected and valid
	## cardinality = 0..1
	## replace_scope = { this = country root = country }
	modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}

	## cardinality = 0..1
	starting_colony = <planet_class>
	## cardinality = 0..1
	swap_type = {
		## cardinality = 0..1
		name = localisation # may not be (from vanilla)
		### In empire creation / galaxy setup, this has no scope. During the game, when there are actual countries existing, it is set to country scope.
		### If you want to use country scope here, you must always check is_scope_valid first (see civic_devouring_swarm), or you will get errors or it won't work as intended.
		## cardinality = 0..1
		description = localisation
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		### modifier that is applied to the country when triggers are evaluated as true
		## cardinality = 0..1
		modifier = {
			alias_name[modifier] = alias_match_left[modifier]
		}
	}

	subtype[civic] = {
		### default: 1
		## cardinality = 0..1
		cost = int[0..inf]

		### default: yes
		## cardinality = 0..1
		pickable_at_start = bool

		### default: yes, set to no to prevent adding or removing this after creation of the empire
		## cardinality = 0..1
		modification = bool

		### default: no
		## cardinality = 0..1
		can_build_ruler_ship = bool

		### default: empty; trait set to enforce on the primary species
		## cardinality = 0..1
		traits = {
			## cardinality = 0..inf
			trait = <trait.species_trait>
		}

		### default: none; if present, will enable secondary species customization in empire designer and will create secondary species & pops at galaxy generation time (see empire_init_create_capital_secondary_pops)
		## cardinality = 0..1
		has_secondary_species = {
			title = localisation
			## cardinality = 0..1
			traits = {
				## cardinality = 1..5
				trait = <trait>
			}
		}

		## cardinality = 0..1
		## replace_scope = { this = country root = country }
		ai_weight = {
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
	}

	subtype[origin] = {
		is_origin = yes
		## cardinality = 0..1
		picture = <sprite>
		## cardinality = 0..1
		initializers = {
			## cardinality = 1..inf
			<solar_system_initializer>
		}
		## cardinality = 0..1
		max_once_global = yes
		## cardinality = 0..1
		flags = {
			## cardinality = 0..inf
			value_set[country_flag]
		}
		## cardinality = 0..1
		advanced_start = bool
		### default: empty; trait set to enforce on the primary species. They cannot be removed, but more can be added if points/picks permit
		## cardinality = 0..1
		traits = {
			## cardinality = 0..inf
			trait = <trait.species_trait>
		}
		### Such a descriptive tag, this.
		## cardinality = 0..1
		non_colonizable_planet_class_neighbor = yes

		### default: none; if present, will enable secondary species customization in empire designer and will create secondary species & pops at galaxy generation time (see empire_init_create_capital_secondary_pops)
		## cardinality = 0..1
		has_secondary_species = {
			title = localisation
			## cardinality = 0..1
			traits = {
				## cardinality = 1..5
				trait = <trait>
			}
		}

		## cardinality = 0..1
		habitability_preference = <planet_class>
		## cardinality = 0..1
		preferred_planet_class_neighbor = no

	}
}

councilor = {
	### Which leader classes can have this council position. Currently only used for the Recruit new Leader buttons. Default = none.
	leader_class = {
		## cardinality = 0..inf
		<leader_class>
	}
	## replace_scope = { this = country root = country }
	possible = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	### Can a leader have this council position. Used to filter leaders. Scope: THIS = Leader.
	## replace_scope = { this = leader root = leader }
	is_leader_possible = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	### Civic that is required for this council position. Also used by UI. Default = none.
	## cardinality = 0..1
	civic = <civic_or_origin.civic>
	### Country Modifier, that is multiplied by assigned Leader's level.
	## cardinality = 0..1
	## replace_scope = { this = country root = country }
	modifier = {
		alias_name[modifier] = alias_match_left[modifier]
	}
	icon = <sprite>
	### Custom tooltip text shown for the modifier of the council position.
	## cardinality = 0..1
	custom_tooltip = localisation
	### Custom tooltip text shown for the requirements of the council position.
	## cardinality = 0..1
	conditional_tooltip = localisation
}

#aliases - used in species_classes and perhaps other places.

alias[government_trigger:authority] = {
	## cardinality = 0..1
	value = <authority>
	## cardinality = 0..inf
	OR = {
		## cardinality = 0..1
		text = localisation
		## cardinality = 1..inf
		value = <authority>
	}
	## cardinality = 0..inf
	NOT = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..inf
		value = <authority>
	}
	## cardinality = 0..inf
	NOR = {
		## cardinality = 0..1
		text = localisation
		## cardinality = 1..inf
		value = <authority>
	}
}
alias[government_trigger:country_type] = {
	## cardinality = 0..1
	value = <country_type>

	## cardinality = 0..inf
	OR = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..99
		value = <country_type>
	}
	## cardinality = 0..inf
	NOT = {
		## cardinality = 0..1
		text = localisation
		value = <country_type>
	}
	## cardinality = 0..inf
	NOR = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..99
		value = <country_type>
	}
}
alias[government_trigger:ethics] = {
	## cardinality = 0..3
	value = <ethic>

	## cardinality = 0..inf
	OR = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..99
		value = <ethic>
	}
	## cardinality = 0..inf
	NOT = {
		## cardinality = 0..1
		text = localisation
		value = <ethic>
	}
	## cardinality = 0..inf
	NOR = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..99
		value = <ethic>
	}
}
alias[government_trigger:civics] = {
	## cardinality = 0..3
	value = <civic_or_origin.civic>

	## cardinality = 0..inf
	OR = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..99
		value = <civic_or_origin.civic>
	}
	## cardinality = 0..inf
	NOT = {
		## cardinality = 0..1
		text = localisation
		## cardinality = 0..99
		value = <civic_or_origin.civic>
	}
	## cardinality = 0..inf
	NOR = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..99
		value = <civic_or_origin.civic>
	}
}
alias[government_trigger:origin] = {
	## cardinality = 0..1
	value = <civic_or_origin.origin>

	## cardinality = 0..inf
	OR = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..99
		value = <civic_or_origin.origin>
	}
	## cardinality = 0..inf
	NOT = {
		## cardinality = 0..1
		text = localisation
		value = <civic_or_origin.origin>
	}
	## cardinality = 0..inf
	NOR = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..99
		value = <civic_or_origin.origin>
	}
}
alias[government_trigger:species_class] = {
	## cardinality = 0..1
	value = <species_class>

	## cardinality = 0..inf
	OR = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..99
		value = <species_class>
	}
	## cardinality = 0..inf
	NOT = {
		## cardinality = 0..1
		text = localisation
		value = <species_class>
	}
	## cardinality = 0..inf
	NOR = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..99
		value = <species_class>
	}
}
alias[government_trigger:species_archetype] = {
	## cardinality = 0..1
	value = <species_archetype>

	## cardinality = 0..inf
	OR = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..99
		value = <species_archetype>
	}
	## cardinality = 0..inf
	NOT = {
		## cardinality = 0..1
		text = localisation
		value = <species_archetype>
	}
	## cardinality = 0..inf
	NOR = {
		## cardinality = 0..1
		text = localisation
		## severity = info
		## cardinality = 1..99
		value = <species_archetype>
	}
}
alias[government_trigger:OR] = {
	alias_name[government_trigger] = alias_match_left[government_trigger]
}
