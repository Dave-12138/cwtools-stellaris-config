types = {
	type[galactic_focus] = {
		path = "game/common/galactic_focuses"
		file_extension = .txt
		localisation = {
			## required
			Name = "$"
			## required
			Description = "$_desc"
		}
	}
	type[resolution_category] = {
		path = "game/common/resolution_categories"
		file_extension = .txt
		localisation = {
			## required
			Name = "$"
		}
		images = {
			## primary
			icon = "#icon" <sprite>
		}
	}
	type[resolution_group] = {
		path = "game/common/resolution_groups"
		file_extension = .txt
	}
	type[resolution] = {
		path = "game/common/resolutions"
		file_extension = .txt
		localisation = {
			## required
			Name = "$"
			## required
			Description = "$_desc"
		}
		images = {
			## primary
			icon = "#icon" # <sprite> | scalar
		}
	}
}

galactic_focus = {
	icon = <sprite>
	### effect applied to community members if fulfilled, scope is country
	## replace_scopes = { this = country root = country }
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
	### potential trigger, no scope check
	## replace_scopes = { this = no_scope root = no_scope }
	potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	### trigger to determine if the focus has been fulfilled, no scope check
	## replace_scopes = { this = no_scope root = no_scope }
	trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	### weight to determine which focus should be selected, no scope check
	## replace_scopes = { this = no_scope root = no_scope }
	## cardinality = 0..1
	weight = {
		weight = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
}

resolution_category = {
	group = localisation
	icon = <sprite>
	## cardinality = 0..1
	multiple_active_resolutions = yes
	resolution_types = {
		## cardinality = 1..inf
		<resolution>
	}
}

resolution_group = {
	color_index = int[0..inf]
	text_color_code = <textcolor>
}

## replace_scopes = { this = country root = country from = country }
resolution = {
	icon = scalar #not really
	resources = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}
	### Does the resolution require a target country?
	target = bool
	## cardinality = 0..1
	level = int
	## cardinality = 0..1
	sanction = yes
	## cardinality = 0..1
	fire_and_forget = yes
	## cardinality = 0..1
	harmful = bool
	### Modifier to be applied to all community members if passed. Apparently. Not sure about that...
	## cardinality = 0..1
	modifier = single_alias_right[modifier]
	### Modifier to be applied to all community members if passed and the potential trigger is true
	## cardinality = 0..inf
	triggered_modifier = single_alias_right[triggered_modifier]
	### Effect to be applied if passed, scope is country
	## cardinality = 0..1
	effect = {
		alias_name[effect] = alias_match_left[effect]
	}
	### Effect to be applied if failed, scope is country
	## cardinality = 0..1
	fail_effects = {
		alias_name[effect] = alias_match_left[effect]
	}
	## cardinality = 0..1
	potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	### Resolution only in effect while this trigger is met
	## cardinality = 0..1
	active = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	allow = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	breach = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
	valid_target = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	ai_weight = {
		enum[weight_or_base] = float
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
}
