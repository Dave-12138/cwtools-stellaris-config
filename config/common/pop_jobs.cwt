types = {
	type[job] = {
		path = "game/common/pop_jobs"
		subtype[capped] = {
			## cardinality = 0..1
			is_capped_by_modifier = yes
		}
		subtype[uncapped] = {
			is_capped_by_modifier = no
		}
		localisation = {
			## required
			name = "job_$"
			## required
			plural = "job_$_plural"
			## required
			desc = "job_$_desc"
			## optional
			effect = "job_$_effect_desc" # inferred
			subtype[uncapped] = {
				## required
				modifier = mod_job_$_add
				## optional
				per_pop_modifier = mod_job_$_per_pop
				## optional
				per_pop_modifier_short = mod_job_$_per_pop_short
			}
		}
		images = {
			## primary
			icon = "#icon" # filepath[gfx/interface/icons/jobs/job_,.dds]
			## primary
			icon = "gfx/interface/icons/jobs/job_$.dds" # inferred
			building_icon = "#building_icon" #  <building> | icon[gfx/interface/icons/buildings]
		}
	}
}

## push_scope = pop
job = {
	## cardinality = 0..inf
	desc = {
		## replace_scopes = { this = planet root = planet }
		trigger = single_alias_right[trigger_clause]
		text = localisation
	}

	# make it optional to compatible with leader background jobs
	## cardinality = 0..1
	category = <pop_category>
	## cardinality = 0..1
	condition_string = localisation
	## cardinality = 0..1
	building_icon = <building>
	## cardinality = 0..1
	building_icon = icon[gfx/interface/icons/buildings]
	#building_icon = <sprite>
	## cardinality = 0..1
	clothes_texture_index = int
	## cardinality = 0..1
	icon = filepath[gfx/interface/icons/jobs/job_,.dds]

	## cardinality = 0..1
	exempt_from_ai_amenity_prioritization = bool
	## cardinality = 0..1
	is_capped_by_modifier = bool
	## cardinality = 0..1
	can_set_priority = bool
	## cardinality = 0..1
	is_pre_sapient = bool
	## cardinality = 0..1
	ignores_sapience = bool
	## cardinality = 0..1
	ignores_favorite = bool
	## cardinality = 0..1
	purge = <purge_type>

	## cardinality = 0..1
	### Sets whether the job contributes to diplo weight. Default = yes
	contributes_to_diplo_weight = bool

	## cardinality = 0..1
	### Only uses certain simple triggers.
	possible_pre_triggers = {
		alias_name[pop_pre_trigger] = alias_match_left[pop_pre_trigger]
	}

	## cardinality = 0..1
	possible_precalc = can_fill_ruler_job
	## cardinality = 0..1
	possible_precalc = can_fill_specialist_job
	## cardinality = 0..1
	possible_precalc = can_fill_worker_job
	## cardinality = 0..1
	possible_precalc = can_fill_drone_job
	## cardinality = 0..1
	possible_precalc = enum[job_trigger]

	## cardinality = 0..1
	possible = single_alias_right[trigger_clause]

	## cardinality = 0..1
	resources = {}
	## cardinality = 0..1
	resources = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}
	## cardinality = 0..1
	overlord_resources = {
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}

	## cardinality = 0..1
	## replace_scopes = { this = pop root = pop }
	pop_modifier = single_alias_right[modifier_clause]
	## cardinality = 0..1
	## replace_scopes = { this = country root = country }
	country_modifier = single_alias_right[modifier_clause]
	## cardinality = 0..1
	## replace_scopes = { this = planet root = planet }
	planet_modifier = single_alias_right[modifier_clause]

	## cardinality = 0..inf
	## replace_scopes = { this = pop root = pop }
	triggered_pop_modifier = single_alias_right[triggered_modifier_by_pop_clause]
	## cardinality = 0..inf
	## replace_scopes = { this = country root = country }
	triggered_country_modifier = single_alias_right[triggered_modifier_by_pop_clause]
	## cardinality = 0..inf
	## replace_scopes = { this = planet root = planet }
	triggered_planet_modifier = single_alias_right[triggered_modifier_by_pop_clause]

	## cardinality = 0..1
	weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}
}

