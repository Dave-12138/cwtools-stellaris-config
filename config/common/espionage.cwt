
types = {
	type[espionage_category] = {
		path = "game/common/espionage_operation_categories"
		file_extension = .txt
	}
	type[espionage_asset] = {
		path = "game/common/espionage_assets"
		file_extension = .txt
	}
	type[espionage_operation] = {
		path = "game/common/espionage_operation_types"
		file_extension = .txt
		localisation = {
			## required
			Name = "$"
		}
		subtype[no_target] = {
			## cardinality = 0..1
			target = none
		}
		subtype[megastructure] = {
			target = megastructure
		}
		subtype[country] = {
			target = country
		}
		subtype[fleet] = {
			target = fleet
		}
		subtype[army] = {
			target = army
		}
		subtype[pop_faction] = {
			target = pop_faction
		}
		subtype[federation] = {
			target = federation
		}
		subtype[starbase] = {
			target = starbase
		}
		subtype[spynetwork] = {
			target = spynetwork
		}
		images = {
			picture = "#picture" # <sprite>
		}
	}
}

espionage_asset = {
	appearance = {
		name_generation_method = random_person
		name_generation_method = nongenerated
		portrait_generation_method = random_person
		portrait_generation_method = nongenerated
		## cardinality = 0..1
		default_portrait = <sprite>
	}
    passive = {
		alias_name[modifier] = alias_match_left[modifier]
	}
    active = {
		alias_name[modifier] = alias_match_left[modifier]
	}
    possible = {
		alias_name[trigger] = alias_match_left[trigger]
	}
    potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	### primary category always goes first!
    categories = {
		## cardinality = 1..inf
		<espionage_category>
	}
}

espionage_category = {}

## replace_scope = { this = spy_network root = spy_network }
espionage_operation = {
	### Valid target types are country, megastructure, starbase, fleet, army, pop_faction, spynetwork, federation and none (spy network target is the target then)
	## cardinality = 0..1
	target = enum[espionage_operation_targets]
    categories = {
		## cardinality = 1..inf
		<espionage_category>
	}
	### GFX_* sprite key for the operation image
	picture = <sprite>
	### Description generator for the operation, with scope this=spy network
	## cardinality = 1..inf
	desc = localisation
	### Description generator for the operation, with scope this=spy network
	## cardinality = 1..inf
	desc = {
		trigger = { alias_name[trigger] = alias_match_left[trigger] }
		text = localisation
	}
	stages = int

	spy_power_cost = int

    resources = {
        category = <economic_category>
		alias_name[economic_template_no_produce] = alias_match_left[economic_template_no_produce]
    }

    potential = {
		alias_name[trigger] = alias_match_left[trigger]
	}
    allow = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## cardinality = 0..1
    abort = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	subtype[megastructure] = {
		## cardinality = 0..1
		## replace_scope = { this = megastructure root = megastructure }
		target_allow = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		## replace_scope = { this = megastructure root = megastructure }
		target_potential = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}
	subtype[country] = {
		## cardinality = 0..1
		## replace_scope = { this = country root = country }
		target_allow = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		## replace_scope = { this = country root = country }
		target_potential = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}
	subtype[fleet] = {
		## cardinality = 0..1
		## replace_scope = { this = fleet root = fleet }
		target_allow = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		## replace_scope = { this = fleet root = fleet }
		target_potential = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}
	subtype[army] = {
		## cardinality = 0..1
		## replace_scope = { this = megastructure root = megastructure }
		target_allow = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		## replace_scope = { this = megastructure root = megastructure }
		target_potential = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}
	subtype[pop_faction] = {
		## cardinality = 0..1
		## replace_scope = { this = pop_faction root = pop_faction }
		target_allow = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		## replace_scope = { this = pop_faction root = pop_faction }
		target_potential = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}
	subtype[federation] = {
		## cardinality = 0..1
		## replace_scope = { this = federation root = federation }
		target_allow = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		## replace_scope = { this = federation root = federation }
		target_potential = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}
	subtype[starbase] = {
		## cardinality = 0..1
		## replace_scope = { this = starbase root = starbase }
		target_allow = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		## replace_scope = { this = starbase root = starbase }
		target_potential = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}
	subtype[spynetwork] = {
		## cardinality = 0..1
		## replace_scope = { this = spy_network root = spy_network }
		target_allow = {
			alias_name[trigger] = alias_match_left[trigger]
		}
		## cardinality = 0..1
		## replace_scope = { this = spy_network root = spy_network }
		target_potential = {
			alias_name[trigger] = alias_match_left[trigger]
		}
	}

	### Stage definition, order dependent.
	## cardinality = 1..inf
	stage = {
		### min max interval type. interval is defined either by '<int>' or '{ min = <int> max=<int> }' where the later will randomize a value between min and max.
        difficulty = int
		### icon gfx type.
        icon = <sprite>
		### event to fire when finished the state.
        event = <event.espionage_operation>
	}

	### Effect to fire when a roll fails, with scope this=spy operation.
    on_roll_failed = {
		alias_name[effect] = alias_match_left[effect]
    }
	### Effect to fire upon operation creation, with scope this=spy operation.
    on_create = {
		alias_name[effect] = alias_match_left[effect]
    }
}

